 #!/usr/bin/env bash

# function to create a virtual environment in a directory separate from
# where it is called
#
# create_and_enable_virtualenv.sh --python=python3.8 --clear
#
# Environmental Variables required to be set:
# 
# JOBVENVDIR - where on the system to create the virtualenv
#            - e.g. /edx/var/jenkins/jobvenvs/
#
# Reason for existence: shiningpanda, the jenkins plugin that manages our
# virtualenvironments for jenkins jobs, is no longer supported so we need
# to stop using it. The tricky part is shiningpanda uses virtualenvwrapper
# underneath the hood, so while we're moving jenkins jobs to python3.8
# and beyond withOUT shiningpanda, we want to be careful to not futz with
# virtualenvwrapper environmental variables (which are required for it to
# function). Therefore, we have this separate implementation of virtualenv
# management.
#
# Oh, why not create virtualenvironments right in the jenkins workspace
# where the job is run? Because workspaces are so deep in the filesystem
# that the autogenerated shebang line created by virtualenv on things in
# the virtualenv's bin directory will often be too long for the OS to
# parse.

if [ -z "$JOBVENVDIR" ]
then
	echo "You need to set JOBVENVDIR in your environment before using!" >&2
	exit 1
fi

HERE=`pwd`

# create a unique hash for the job based on its location
venvname=($(echo -n "$HERE" | md5sum))

cd $JOBVENVDIR
virtualenv $@ "$venvname"
. "$venvname/bin/activate"
cd "$HERE"
