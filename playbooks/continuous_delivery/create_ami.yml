# This playbook will create an AMI from an EC2 instance launched with the
# continuous_deliver/launche_instance playbook.
#
# Required variables for this playbook:
#
#   - instance_id                     - the ec2 instance ID use to create the AMI
#   - edx_environment                 - value to use for the environment tag
#   - deployment                      - value to use for the deploy tag
#   - app_repo                        - the url of the github repo for this app
#   - app_version                     - git hash of the app (play, service, IDA) being deployed
#   - play                            - the play that was run
#   - cache_id                        - the cache_id version
#
# Other variables
#   - ec2_region                      - The region used to create the AMI
#   - ami_creation_timeout            - how long to wait before giving up on AMI creation in seconds
#   - ami_wait                        - (yes/no) should ansible pause while
#   - no_reboot                       - (yes/no) should the instance not be rebooted during AMI creation
#   - artifact_path                   - the path to where this ansible run stores the artifacts for the pipeline
#   - extra_name_identifier           - Makes each AMI unique if desired - Default: 0
#   - version_tags                    - A mapping of {app: [repo, version], ...}, used to generate
#                                       a "version:app = repo version" tag on the AMI
#
# Example command line to run this playbook:
#    ansible-playbook -vvvv -i "localhost," -c local \
#       -e @overrides.yml \
#       -e @/tmp/ansible-runtime/d057a5d9-4fc5-4a21-9646-4c135be0b7c8/launch_info.yml \
#       -e play=pipline-test \
#       -e deployment=edx \
#       -e edx_environment=sandbox \
#       -e app_version=12345 \
#       -e cache_id=12345 \
#       create_ami.yml
#

- hosts: all
  vars:
    ec2_region: us-east-1
    ami_wait: yes
    stop_wait: yes
    ami_creation_timeout: 5400
    no_reboot: no
    artifact_path: /tmp/ansible-runtime
    extra_name_identifier: 0
  gather_facts: False
  connection: local
  tasks:

  - name: Fetch tags on the instance
    ec2_tag:
      region: "{{ ec2_region }}"
      resource: "{{ instance_id }}"
      state: list
    register: instance_tags

  - name: Stop instance
    ec2:
      instance_ids: "{{ instance_id }}"
      state: stopped
      wait: "{{ stop_wait }}"
      region: "{{ ec2_region }}"

  - name: Create AMI
    ec2_ami:
      instance_id: "{{ instance_id }}"
      name: "{{ edx_environment }} -- {{ deployment }} -- {{ play }} -- {{ extra_name_identifier }} -- {{ app_version[:7] }}"
      region: "{{ ec2_region }}"
      wait: "{{ ami_wait }}"
      wait_timeout: "{{ ami_creation_timeout }}"
      no_reboot: "{{ no_reboot }}"
      description: "AMI built via edX continuous delivery pipeline - Ansible version: {{ ansible_version }}"
      # used a JSON object here as there is a string interpolation in the keys.
      tags: "{
                'version:{{ play }}-from-pipeline':'{{ app_repo }} {{ app_version }}',
                'play':'{{ play }}',
                'cache_id':'{{ cache_id }}',
                'environment':'{{ edx_environment }}',
                'deployment':'{{ deployment }}'
            }"
    register: ami_register

  - name: Add any tags that are on the instance to the AMI
    ec2_tag:
      region: "{{ ec2_region }}"
      resource: "{{ ami_register.image_id }}"
      tags: "{{ instance_tags.tags }}"

  - name: Add any version tags that were passed on the commandline
    ec2_tag:
      region: "{{ ec2_region }}"
      resource: "{{ ami_register.image_id }}"
      tags: "{
          {% for name, (repo, version) in version_tags.items() %}
          'version:{{ name }}': '{{ repo }} {{ version }}',
          {% endfor %}
      }"
    when: version_tags is defined

  - name: Fetch tags on the AMI
    ec2_tag:
      region: "{{ ec2_region }}"
      resource: "{{ ami_register.image_id }}"
      state: list
    register: ami_tags

  - name: Ensure artifact directory exists
    file:
      path: "{{ artifact_path }}"
      state: directory
      force: yes

  - name: Generate artifact container the instance_id
    template:
      src: templates/local/ami_template.yml.j2
      dest: "{{ artifact_path }}/ami.yml"
      mode: 0600
