# This playbook will check for migrations that need to be run for Django applications within a larger
# Django application. If migrations exist, it will run the migrations while saving the output as an artifact.
#
# The playbook uses the Django management commands found in this Django app repo:
# https://github.com/edx/edx-django-release-util
# So the Django app above needs to be installed in the Django app being checked for migrations.
#
# Required variables for this playbook:
#
#   - APPLICATION_PATH                - the top-level path of the Django application; the application lives underneath
#                                       this directory in a directory with the same name as APPLICATION_NAME.
#                                       NOTE: It is assumed that edx-django-release-util is one of its INSTALLED_APPS.
#   - APPLICATION_NAME                - The name of the application that we are migrating.
#   - APPLICATION_USER                - user which is meant to run the application
#   - ARTIFACT_PATH                   - the path where the migration artifacts should be copied after completion
#   - DB_MIGRATION_USER               - the database username
#   - DB_MIGRATION_PASS               - the database password
#
# Other variables:
#   - HIPCHAT_TOKEN                   - API token to send messages to hipchat
#   - HIPCHAT_ROOM                    - ID or name of the room to send the notification
#   - HIPCHAT_URL                     - URL of the hipchat API  (defaults to v1 of the api)
#   - migration_plan                  - the filename where the unapplied migration YAML output is stored
#   - migration_result                - the filename where the migration output is saved
#   - SUB_APPLICATION_NAME            - used for migrations in edxapp {lms|cms}, must be specified
#                                         when APPLICATION_NAME is edxapp
#   - EDX_PLATFORM_SETTINGS           - The settings to use for the edx platform {aws|devstack} DEFAULT: aws
#
# Example command line to run this playbook:
#    ansible-playbook -vvvv -i "localhost," -c local \
#       -e @overrides.yml \
#       run_migrations.yml
#



- hosts: all
  vars:
    migration_plan: migration_plan.yml
    migration_result: migration_result.yml
    HIPCHAT_URL: https://api.hipchat.com/v2/
    EDX_PLATFORM_SETTINGS: "aws"
    COMMAND_PREFIX: " . {{ APPLICATION_PATH }}/{{ APPLICATION_NAME }}_env; DB_MIGRATION_USER={{ DB_MIGRATION_USER }} DB_MIGRATION_PASS={{ DB_MIGRATION_PASS }} /edx/bin/python.{{ APPLICATION_NAME }} /edx/bin/manage.{{ APPLICATION_NAME }}"
  vars_files:
    - roles/edxapp/defaults/main.yml
  gather_facts: False
  become: True
  tasks:

  - name: Create a temporary directory for the migration output.
    command: mktemp -d
    become_user: "{{ APPLICATION_USER }}"
    register: temp_output_dir

  - name: generate list of unapplied migrations
    shell: '{{ COMMAND_PREFIX }} show_unapplied_migrations --output_file "{{ temp_output_dir.stdout }}/{{ migration_plan }}"'
    become_user: "{{ APPLICATION_USER }}"
    when: APPLICATION_NAME != "edxapp"

  - name: generate list of edxapp unapplied migrations
    shell: '{{ COMMAND_PREFIX }} {{ SUB_APPLICATION_NAME }} show_unapplied_migrations --database "{{ item }}" --output_file "{{ temp_output_dir.stdout }}/{{ item }}_{{ migration_plan }}" --settings "{{ EDX_PLATFORM_SETTINGS }}"'
    become_user: "{{ APPLICATION_USER }}"
    when: APPLICATION_NAME == "edxapp" and item != "read_replica"
    with_items: "{{ edxapp_databases.keys() }}"

  - name: migrate to apply any unapplied migrations
    shell: '{{ COMMAND_PREFIX }} run_migrations  --output_file "{{ temp_output_dir.stdout }}/{{ migration_result }}"'
    become_user: "{{ APPLICATION_USER }}"
    when: APPLICATION_NAME != "edxapp"

  - name: migrate to apply any edxapp unapplied migrations
    shell: '{{ COMMAND_PREFIX }} {{ SUB_APPLICATION_NAME }} run_migrations --database "{{ item }}" --settings "{{ EDX_PLATFORM_SETTINGS }}" --output_file "{{ temp_output_dir.stdout }}/{{ migration_result }}"'
    become_user: "{{ APPLICATION_USER }}"
    when: APPLICATION_NAME == "edxapp" and item != "read_replica"
    with_items: "{{ edxapp_databases.keys() }}"

  - name: List all migration files
    action: "command ls -1 {{ temp_output_dir.stdout }}"
    register: migration_files

  - name: Transfer artifacts to the proper place.
    fetch:
      src: "{{ temp_output_dir.stdout }}/{{ item }}"
      dest: "{{ ARTIFACT_PATH }}/"
      flat: True
      fail_on_missing: True
      mode: 0700
    with_items:
      - "{{ migration_files.stdout_lines }}"

  - name: Send Hipchat notification cleanup has finished
    hipchat_2_0_0_1:
      api: "{{ HIPCHAT_URL }}"
      token: "{{ HIPCHAT_TOKEN }}"
      room: "{{ HIPCHAT_ROOM }}"
      msg: "Migrations have completed."
    ignore_errors: yes
    when: HIPCHAT_TOKEN is defined
