---
#
# edX Configuration
#
# github:     https://github.com/openedx/configuration
# wiki:       https://openedx.atlassian.net/wiki/display/OpenOPS
# code style: https://openedx.atlassian.net/wiki/display/OpenOPS/Ansible+Code+Conventions
# license:    https://github.com/openedx/configuration/blob/master/LICENSE.TXT
#
#
#
# Tasks for role git_clone
#
# Overview:
#
# This role performs the repetitive tasks that most edX roles
# require in our default configuration.
#
#
# Rewrite this task using the ansible git-config module once we'll migrate to Ansible 2.x
# https://docs.ansible.com/ansible/git_config_module.html#git-config

# On devstack, tell Git that repos owner by other users are safe.
# This is necessary in git 2.35.2 and higher. Devstack uses a mix of
# root and edxapp and git+https pip dependencies end up cloning repos
# into an open-ended set of directories, so our best bet is to just
# say every dir on devstack is safe.
- name: Mark all directories as safe for git on devstack
  shell: "git config --global --add safe.directory '*'"
  become: true
  when: "({{ devstack | default(False) }} or {{ edx_django_service_is_devstack | default(False) }})"
  tags:
    - devstack

- name: Set git fetch.prune to ignore deleted remote refs
  shell: git config --global fetch.prune true
  become_user: "{{ repo_owner }}"
  no_log: "{{ GIT_CLONE_NO_LOGGING }}"
  when: repo_owner is defined and GIT_REPOS|length > 0
  tags:
    - install
    - install:code

- name: Validate git protocol
  fail:
    msg: '{{ GIT_REPOS.PROTOCOL }} must be "https" or "ssh"'
  when: (item.PROTOCOL != "https") and (item.PROTOCOL != "ssh") and GIT_REPOS is defined
  with_items: "{{ GIT_REPOS }}"
  no_log: "{{ GIT_CLONE_NO_LOGGING }}"
  tags:
    - install
    - install:code


- name: Install read-only ssh key
  copy:
    dest: "{{ git_home }}/.ssh/{{ item.REPO }}"
    content: "{{ item.SSH_KEY }}"
    owner: "{{ repo_owner }}"
    group: "{{ repo_group }}"
    mode: "0600"
  when: item.PROTOCOL == "ssh" and GIT_REPOS is defined
  with_items: "{{ GIT_REPOS }}"
  no_log: "{{ GIT_CLONE_NO_LOGGING }}"
  tags:
    - install
    - install:code

- name: Check that working tree is clean
  shell: test ! -e "{{ item }}" || git -C "{{ item }}" status --porcelain --untracked-files=no
  register: dirty_files
  become_user: "{{ repo_owner }}"
  # Using the map here means that the items will only be the DESTINATION strings,
  # rather than the full GIT_REPOS structures, which have data we don't want to log,
  # so we don't have to use no_log on this task.
  with_items: "{{ GIT_REPOS | map(attribute='DESTINATION') | list }}"

- name: Require a clean working tree
  fail:
    msg: "There are modified files in {{ item.item }}: {{ item.stdout }}"
  when: item.stdout|length > 0
  with_items: "{{ dirty_files.results }}"

- name: Checkout code over ssh
  git:
    repo: "git@{{ item.DOMAIN }}:{{ item.PATH }}/{{ item.REPO }}"
    dest: "{{ item.DESTINATION }}"
    version: "{{ item.VERSION }}"
    accept_hostkey: yes
    key_file: "{{ git_home }}/.ssh/{{ item.REPO }}"
    depth: 1
  become_user: "{{ repo_owner }}"
  register: code_checkout
  when: item.PROTOCOL == "ssh" and GIT_REPOS is defined
  with_items: "{{ GIT_REPOS }}"
  no_log: "{{ GIT_CLONE_NO_LOGGING }}"
  tags:
    - install
    - install:code

- name: Checkout code over https
  git:
    repo: "https://{{ item.DOMAIN }}/{{ item.PATH }}/{{ item.REPO }}"
    dest: "{{ item.DESTINATION }}"
    version: "{{ item.VERSION }}"
    depth: 1
  become_user: "{{ repo_owner }}"
  register: code_checkout
  when: item.PROTOCOL == "https" and GIT_REPOS is defined
  with_items: "{{ GIT_REPOS }}"
  no_log: "{{ GIT_CLONE_NO_LOGGING }}"
  tags:
    - install
    - install:code

- name: Remove read-only ssh key
  file:
    dest: "{{ git_home }}/.ssh/{{ item.REPO }}"
    state: absent
  when: item.PROTOCOL == "ssh" and GIT_REPOS is defined
  with_items: "{{ GIT_REPOS }}"
  no_log: "{{ GIT_CLONE_NO_LOGGING }}"
  tags:
    - install
    - install:code

- name: Run git safe.directory
  shell: git config --global --add safe.directory {{ item.DESTINATION }}
  become: true
  with_items: "{{ GIT_REPOS }}"
  no_log: "{{ GIT_CLONE_NO_LOGGING }}"
  tags:
    - install
    - install:code

- name: Run git clean after checking out code
  shell: cd {{ item.DESTINATION }} && git clean -xdf
  become: true
  with_items: "{{ GIT_REPOS }}"
  no_log: "{{ GIT_CLONE_NO_LOGGING }}"
  tags:
    - install
    - install:code
