---
# - name: check to see if MongoDB is already installed
#   stat:
#     path: /etc/init.d/mongod
#   register: mongodb_already_installed
#   when: MONGO_CLUSTERED

# - name: verify MongoDB not installed (clustered upgrades)
#   fail: msg="MongoDB is currently installed and cannot be safely upgraded in a clustered configuration.  FIXME"
#   when: mongodb_already_installed.stat.exists and MONGO_CLUSTERED

- name: disable transparent huge pages on startup (http://docs.mongodb.org/manual/tutorial/transparent-huge-pages/)
  copy:
    src: disable-transparent-hugepages.conf
    dest: /etc/init/disable-transparent-hugepages.conf
    owner: root
    group: root
    mode: 0755
  tags:
    - "hugepages"
    - "install"
    - "install:system-requirements"

- name: disable transparent huge pages
  service:
    name: disable-transparent-hugepages
    enabled: yes
    state: started
  tags:
    - "hugepages"
    - "install"
    - "install:system-requirements"

- name: install python pymongo for mongo_user ansible module
  pip:
    name: pymongo
    state: present
    version: "{{ pymongo_version }}"
    extra_args: "-i {{ COMMON_PYPI_MIRROR_URL }}"

- name: add the mongodb signing key
  apt_key:
    id: "{{ MONGODB_APT_KEY }}"
    keyserver: "{{ MONGODB_APT_KEYSERVER }}"
    state: present

- name: add the mongodb repo to the sources list
  apt_repository:
    repo: "{{ MONGODB_REPO }}"
    state: present

#Will this break if it actually upgrades?
- name: install mongo server and recommends
  apt:
    pkg: "{{ item }}"
    state: present
    install_recommends: yes
    force: yes
    update_cache: yes
  with_items: mongodb_debian_pkgs
  tags:
    - install
    - install:system-requirements
    - mongo_packages

- name: create mongo dirs
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ mongo_user  }}"
    group: "{{ mongo_user }}"
  with_items:
    - "{{ mongo_data_dir }}"
    - "{{ mongo_dbpath }}"
    - "{{ mongo_log_dir }}"
    - "{{ mongo_journal_dir }}"

- name: add serverStatus logging script
  template:
    src: "log-mongo-serverStatus.sh.j2"
    dest: "{{ COMMON_BIN_DIR }}/log-mongo-serverStatus.sh"
    owner: "{{ mongo_user }}"
    group: "{{ mongo_user }}"
    mode: 0700
  when: MONGO_LOG_SERVERSTATUS

- name: add serverStatus logging script to cron
  cron:
    name: mongostat logging job
    job: /edx/bin/log-mongo-serverStatus.sh >> {{ mongo_log_dir }}/serverStatus.log 2>&1
  become: yes
  when: MONGO_LOG_SERVERSTATUS

#### DANGER WILL ROBINSON ####
- name: stop mongod service
  service:
    name: mongod
    state: stopped

- name: move mongodb to {{ mongo_data_dir }}
  command: mv /var/lib/mongodb  {{ mongo_data_dir}}/.
  args:
    creates: "{{ mongo_data_dir }}/mongodb"

- name: copy mongodb key file
  copy:
    content: "{{ MONGO_CLUSTER_KEY }}"
    dest: "{{ mongo_key_file }}"
    mode: 0600
    owner: mongodb
    group: mongodb
  when: MONGO_CLUSTERED

- name: copy configuration template
  template:
    src: mongod.conf.j2
    dest: /etc/mongod.conf
    backup: yes
  notify: restart mongo

- name: install logrotate configuration
  template:
    src: mongo_logrotate.j2
    dest: /etc/logrotate.d/hourly/mongo
  tags:
    - "install"
    - "install:configuration"
    - "logrotate"

- name: start mongo service
  service:
    name: mongod
    state: started

- name: wait for mongo server to start
  wait_for:
    port: 27017
    delay: 2
######### END DANGER #########

- name: configure replica set
  mongodb_replica_set:
    username: "{{ MONGO_ADMIN_USER }}"
    password: "{{ MONGO_ADMIN_PASSWORD }}"
    rs_config: "{{ MONGO_RS_CONFIG }}"
  run_once: true
  register: replset_status
  when: MONGO_CLUSTERED

- name: Choose primary
  set_fact:
    mongo_rs_primary: >
      {{ 
      (replset_status.config.members
      | selectattr('stateStr', 'equalto', 'PRIMARY')
      | attr('name') | replace(':'+string(mongo_port), '')
      )
      }}
  when: MONGO_CLUSTERED

- name: Set fake primary host
  set_fact:
    mongo_rs_primary: localhost
  when: not MONGO_CLUSTERED

- name: create super user
  mongodb_user:
    name: "{{ MONGO_ADMIN_USER }}"
    password: "{{ MONGO_ADMIN_PASSWORD }}"
    database: admin
    roles: root
  run_once: true
  delegate_to: "{{ mongo_rs_primary }}"

- name: create mongodb users
  mongodb_user:
    database: "{{ item.database }}"
    login_user: "{{ MONGO_ADMIN_USER }}"
    login_password: "{{ MONGO_ADMIN_PASSWORD }}"
    name: "{{ item.user }}"
    password: "{{ item.password }}"
    roles: "{{ item.roles }}"
    state: present
  with_items: MONGO_USERS
  run_once: true
  delegate_to: "{{ mongo_rs_primary }}"
