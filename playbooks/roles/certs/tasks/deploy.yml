---
- name: Create certificate application config and auth file
  template:
    src: "{{ item.src }}"
    dest: "{{ certs_app_dir }}/{{ item.dest }}"
    owner: "{{ certs_user }}"
    group: "{{ common_web_user }}"
    mode: "0640"
  with_items:
    - { src: 'certs.env.json.j2', dest: 'env.json' }
    - { src: 'certs.auth.json.j2', dest: 'auth.json' }

- name: Copy the boto file
  template:
    src: "boto.j2"
    dest: "{{ certs_app_dir }}/.boto"
    owner: "{{ certs_user }}"
    group: "{{ common_web_user }}"
    mode: 0644

- name: Writing supervisor script for certificates
  template:
    src: certs.conf.j2
    dest: "{{ supervisor_available_dir }}/certs.conf"
    owner: "{{ supervisor_user }}"
    mode: "0644"

- name: Enable supervisor script for certificates
  file:
    src: "{{ supervisor_available_dir }}/certs.conf"
    dest: "{{ supervisor_cfg_dir }}/certs.conf"
    owner: "{{ supervisor_user }}"
    state: link
    force: yes
    mode: "0644"
  when: not disable_edx_services

# This key is only needed if you are pulling down a private
# certificates repo
- name: Install read-only ssh key for the certs repo
  copy:
    content: "{{ CERTS_GIT_IDENTITY }}"
    dest: "{{ certs_git_identity }}"
    force: yes
    owner: "{{ certs_user }}"
    mode: "0600"
  when: CERTS_GIT_IDENTITY != "none"

- name: "Checkout certificates repo into {{ certs_code_dir }}"
  git:
    dest: "{{ certs_code_dir }}"
    repo: "{{ CERTS_REPO }}"
    version: "{{ certs_version }}"
    accept_hostkey: yes
    key_file: "{{ certs_git_identity }}"
  become_user: "{{ certs_user }}"
  register: certs_checkout
  when: CERTS_GIT_IDENTITY != "none"

- name: Checkout certificates repo into {{ certs_code_dir }}
  git:
    dest: "{{ certs_code_dir }}"
    repo: "{{ CERTS_REPO }}"
    version: "{{ certs_version }}"
    accept_hostkey: yes
  become_user: "{{ certs_user }}"
  register: certs_checkout
  when: CERTS_GIT_IDENTITY == "none"

- name: Checkout local theme
  git:
    dest: "{{ certs_app_dir }}/templates"
    repo: "{{ certs_templates_repo }}"
    version: "{{ certs_templates_version }}"
    accept_hostkey: yes
  become_user: "{{ certs_user }}"
  environment:
    GIT_SSH: "{{ certs_git_ssh }}"
  when: certs_templates_repo != ''

- name: Remove read-only ssh key for the certs repo
  file:
    path: "{{ certs_git_identity }}"
    state: absent
  when: CERTS_GIT_IDENTITY != "none"

- name: Install python requirements
  pip:
    requirements: "{{ certs_requirements_file }}"
    virtualenv: "{{ certs_venv_dir }}"
    state: present
    extra_args: "-i {{ COMMON_PYPI_MIRROR_URL }}"
  become_user: "{{ certs_user }}"

  # call supervisorctl update. this reloads
  # the supervisorctl config and restarts
  # the services if any of the configurations
  # have changed.
  #
- name: Update supervisor configuration
  shell:  "{{ supervisor_ctl }} -c {{ supervisor_cfg }} update"
  register: supervisor_update
  become_user: "{{ supervisor_service_user }}"
  changed_when: supervisor_update.stdout is defined and supervisor_update.stdout != ""
  when: not disable_edx_services

- name: Ensure certs has started
  supervisorctl:
    name: certs
    supervisorctl_path: "{{ supervisor_ctl }}"
    config: "{{ supervisor_cfg }}"
    state: started
  become_user: "{{ supervisor_service_user }}"
  when: not disable_edx_services

- name: Create a symlink for venv python
  file:
    src: "{{ certs_venv_bin }}/{{ item }}"
    dest: "{{ COMMON_BIN_DIR }}/{{ item }}.certs"
    state: link
  with_items:
    - python
    - pip

- include: tag_ec2.yml
  when: COMMON_TAG_EC2_INSTANCE
  tags:
    - deploy

- name: Restart certs
  supervisorctl:
    name: certs
    supervisorctl_path: "{{ supervisor_ctl }}"
    config: "{{ supervisor_cfg }}"
    state: restarted
  when: not disable_edx_services
