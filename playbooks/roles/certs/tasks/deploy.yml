---

- name: create certificate application config
  template: >
    src=certs.env.json.j2
    dest={{ certs_app_dir }}/env.json
  sudo_user: "{{ certs_user }}"
  notify: restart certs

- name: create certificate auth file
  template: >
    src=certs.auth.json.j2
    dest={{ certs_app_dir }}/auth.json
  sudo_user: "{{ certs_user }}"
  notify: restart certs

- name: writing supervisor script for certificates
  template: >
    src=certs.conf.j2 dest={{ supervisor_cfg_dir }}/certs.conf
    owner={{ supervisor_user }} mode=0644
  notify: restart certs

- name: create ssh script for git
  template: >
    src={{ certs_git_ssh|basename }}.j2 dest={{ certs_git_ssh }}
    owner={{ certs_user }} mode=750
  notify: restart certs

- local_action:
    module: stat
    path: "{{ CERTS_LOCAL_GIT_IDENTITY }}"
  register: certs_identity

- name: install read-only ssh key for the certs repo
  copy: >
    src={{ CERTS_LOCAL_GIT_IDENTITY }} dest={{ certs_git_identity }}
    force=yes owner={{ certs_user }} mode=0600
  notify: restart certs
  when: certs_identity.stat.exists

- name: checkout certificates repo into {{ certs_code_dir }}
  git: dest={{ certs_code_dir }} repo={{ certs_repo }} version={{ certs_version }}
  sudo_user: "{{ certs_user }}"
  environment:
    GIT_SSH: "{{ certs_git_ssh }}"
  notify: restart certs
  when: certs_identity.stat.exists

- name: remove read-only ssh key for the certs repo
  file: path={{ certs_git_identity }} state=absent
  notify: restart certs
  when: certs_identity.stat.exists

- name : install python requirements
  pip: requirements="{{ certs_requirements_file }}" virtualenv="{{ certs_venv_dir }}" state=present
  sudo_user: "{{ certs_user }}"
  notify: restart certs

  # call supervisorctl update. this reloads
  # the supervisorctl config and restarts
  # the services if any of the configurations
  # have changed.
  #
- name: update supervisor configuration
  shell:  "{{ supervisor_ctl }} -c {{ supervisor_cfg }} update"
  register: supervisor_update
  sudo_user: "{{ supervisor_service_user }}"
  changed_when: supervisor_update.stdout != ""

- name: ensure certs has started
  supervisorctl_local: >
    name=certs
    supervisorctl_path={{ supervisor_ctl }}
    config={{ supervisor_cfg }}
    state=started
  sudo_user: "{{ supervisor_service_user }}"

- name: create a symlink for venv python
  file: >
    src="{{ certs_venv_bin }}/{{ item }}"
    dest={{ COMMON_BIN_DIR }}/{{ item }}.certs
    state=link
  with_items:
  - python
  - pip

- set_fact: certs_installed=true
