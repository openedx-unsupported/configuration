---
- name: check to see that MongoDB 2.4 is not installed
  stat: path=/etc/init.d/mongodb
  register: mongodb_needs_upgrade

- name: verify 2.4 not installed
  fail: msg="MongoDB 2.4 is currently installed and cannot be safely upgraded in a clustered configuration.  Please read http://docs.mongodb.org/manual/release-notes/2.6-upgrade/#upgrade-considerations and upgrade to 2.6."
  when: mongodb_needs_upgrade.stat.exists and MONGO_CLUSTERED
  
- name: check to see if MongoDB is already installed
  stat: path=/etc/init.d/mongod
  register: mongodb_already_installed
  when: MONGO_CLUSTERED

- name: verify MongoDB not installed (clustered upgrades)
  fail: msg="MongoDB is currently installed and cannot be safely upgraded in a clustered configuration.  FIXME"
  when: mongodb_already_installed.stat.exists and MONGO_CLUSTERED

- name: remove mongo 2.4 if present
  apt: >
    pkg=mongodb-10gen
    state=absent purge=yes
    force=yes
  when: mongodb_needs_upgrade.stat.exists and not MONGO_CLUSTERED
  
- name: install python pymongo for mongo_user ansible module
  pip: >
    name=pymongo state=present
    version={{ pymongo_version }} extra_args="-i {{ COMMON_PYPI_MIRROR_URL }}"

- name: add the mongodb signing key
  apt_key: >
    id={{ MONGODB_APT_KEY }}
    keyserver={{ MONGODB_APT_KEYSERVER }}
    state=present

- name: add the mongodb repo to the sources list
  apt_repository: >
    repo='{{ MONGODB_REPO }}'
    state=present

- name: install mongo server and recommends
  apt: >
  apt: 
    pkg={{','.join(mongodb_debian_pkgs)}}
    state=present install_recommends=yes
    force=yes update_cache=yes

- name: create mongo dirs
  file: >
    path="{{ item }}" state=directory
    owner="{{ mongo_user  }}"
    group="{{ mongo_user }}"
  with_items:
    - "{{ mongo_data_dir }}"
    - "{{ mongo_dbpath }}"
    - "{{ mongo_log_dir }}"
    - "{{ mongo_journal_dir }}"

- name: stop mongod service
  service: name=mongod state=stopped

- name: move mongodb to {{ mongo_data_dir }}
  command: >
    mv /var/lib/mongodb  {{ mongo_data_dir}}/.
    creates={{ mongo_data_dir }}/mongodb

- name: copy mongodb key file
  copy: >
    content="{{ MONGO_CLUSTER_KEY }}"
    dest={{ mongo_key_file }}
    mode=0600
    owner=mongodb
    group=mongodb
  when: MONGO_CLUSTERED

- name: copy configuration template
  template: src=mongodb-standalone.conf.j2 dest=/etc/mongod.conf backup=yes
  notify: restart mongo

- name: start mongo service
  service: name=mongod state=started

- name: wait for mongo server to start
  wait_for: port=27017 delay=2

- name: drop super user script
  template: src="create_root.js.j2" dest="/tmp/create_root.js"

- name: create super user with js
  shell: >
    /usr/bin/mongo admin /tmp/create_root.js

- name: delete super user script
  file: path=/tmp/create_root.js state=absent

- name: copy custered configuration template
  template: src=mongodb-clustered.conf.j2 dest=/etc/mongod.conf backup=yes
  when: MONGO_CLUSTERED

- name: restart mongo service
  service: name=mongod state=restarted
  when: MONGO_CLUSTERED

- name: wait for mongo server to start
  wait_for: port=27017 delay=2
  when: MONGO_CLUSTERED

- name: Create the file to initialize the mongod replica set
  template: src=repset_init.js.j2 dest=/tmp/repset_init.js
  when: MONGO_CLUSTERED and MONGO_PRIMARY == ansible_default_ipv4["address"] 

- name: Initialize the replication set
  shell: >
    /usr/bin/mongo /tmp/repset_init.js
  when: MONGO_CLUSTERED and MONGO_PRIMARY == ansible_default_ipv4["address"] 

- name: delete repset script
  file: path=/tmp/repset_init.js state=absent
  when: MONGO_CLUSTERED and MONGO_PRIMARY == ansible_default_ipv4["address"] 

- name: Create the file to add hosts to the mongod replica set
  template: src=repset_add_secondaries.js.j2 dest=/tmp/repset_add_secondaries.js
  when: MONGO_CLUSTERED and MONGO_PRIMARY == ansible_default_ipv4["address"] 

- name: Initialize the replication set
  shell: >
    /usr/bin/mongo /tmp/repset_add_secondaries.js
  when: MONGO_CLUSTERED and MONGO_PRIMARY == ansible_default_ipv4["address"] 

- name: delete repset script
  file: path=/tmp/repset_add_secondaries.js state=absent
  when: MONGO_CLUSTERED and MONGO_PRIMARY == ansible_default_ipv4["address"] 

- name: create a mongodb user
  mongodb_user: >
    database={{ item.database }}
    login_user={{ MONGO_ADMIN_USER }}
    login_password={{ MONGO_ADMIN_PASSWORD }}
    name={{ item.user }}
    password={{ item.password }}
    roles={{ item.roles }}
    state=present
  with_items: MONGO_USERS
  when: not MONGO_CLUSTERED

- name: create a mongodb user
  mongodb_user: >
    database={{ item.database }}
    login_user={{ MONGO_ADMIN_USER }}
    login_password={{ MONGO_ADMIN_PASSWORD }}
    name={{ item.user }}
    password={{ item.password }}
    roles={{ item.roles }}
    state=present
    replica_set={{ mongo_repl_set }}
  with_items: MONGO_USERS
  when: MONGO_CLUSTERED and MONGO_PRIMARY == ansible_default_ipv4["address"] 


