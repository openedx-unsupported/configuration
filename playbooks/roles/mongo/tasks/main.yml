
---
- name: install python pymongo for mongo_user ansible module
  pip: >
    name=pymongo state=present
    version=2.6.3 extra_args="-i {{ COMMON_PYPI_MIRROR_URL }}"

- name: add the mongodb signing key
  apt_key: >
    id=7F0CEB10
    url={{MONGODB_APT_KEY}}
    state=present

- name: add the mongodb repo to the sources list
  apt_repository: >
    repo='{{ MONGODB_REPO }}'
    state=present

- name: install mongo server and recommends
  apt: >
    pkg=mongodb-org={{ mongo_version }}
    state=present install_recommends=yes
    force=yes update_cache=yes

- name: create mongo dirs
  file: >
    path="{{ item }}" state=directory
    owner="{{ mongo_user  }}"
    group="{{ mongo_user }}"
  with_items:
    - "{{ mongo_data_dir }}"
    - "{{ mongo_dbpath }}"
    - "{{ mongo_log_dir }}"

- name: stop mongo service
  service: name=mongod state=stopped

- name: move mongodb to {{ mongo_data_dir }}
  command: mv /var/lib/mongodb  {{ mongo_data_dir}}/.  creates={{ mongo_data_dir }}/mongodb


- name: copy mongodb key file
  copy: >
    content="{{ MONGO_CLUSTER_KEY }}"
    dest={{ mongo_key_file }}
    mode=0600
    owner=mongodb
    group=mongodb
  when: MONGO_CLUSTERED

- name: copy configuration template
  template: src=mongodb.conf.j2 dest=/etc/mongodb.conf backup=yes
  notify: restart mongo

- name: start mongo service
  service: name=mongod state=started

- name: wait for mongo server to start
  wait_for: port=27017 delay=2

- name: Create the file to initialize the mongod replica set
  template: src=repset_init.j2 dest=/tmp/repset_init.js
  when: MONGO_CLUSTERED

- name: Initialize the replication set
  shell: /usr/bin/mongo  /tmp/repset_init.js
  when: MONGO_CLUSTERED

# Ignore errors doesn't work because the module throws an exception
# it doesn't catch.
- name: create a mongodb user
  mongodb_user: >
    database={{ item.database }}
    name={{ item.user }}
    password={{ item.password }}
    state=present
  with_items: MONGO_USERS
  when: mongo_create_users

- name: install s3cmd
  pip: >
    name="s3cmd"
    state=present
    extra_args="-i {{ COMMON_PYPI_MIRROR_URL }}"
  when: MONGO_S3_BACKUP
 
- name: configure s3cmd
  template: >
    dest="{{ MONGO_S3_S3CMD_CONFIG }}"
    src=mongo-s3-backup-s3cfg.j2
    owner=root
    group=root
    mode=0600
  when: MONGO_S3_BACKUP

- name: install backup-mongo-to-s3 script
  template: >
    src=backup-mongo-to-s3.j2
    dest=/edx/bin/backup-mongo-to-s3.sh
    owner=root
    group=root
    mode=0700
  when: MONGO_S3_BACKUP

- name: schedule backup-mongo-to-3s crontab
  cron: 
    name="backup-mongo-to-s3"
    job="/edx/bin/backup-mongo-to-s3.sh"
    backup=yes
    cron_file=backup-mongo-to-s3
    user=root
    hour="{{ MONGO_S3_BACKUP_HOUR }}"
    minute="0"
    day="{{ MONGO_S3_BACKUP_DAY }}"
