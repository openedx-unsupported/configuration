---
- name: Check Configuration Sources
  fail:
    msg: "Configuration Sources Checking (COMMON_EXTRA_CONFIGURATION_SOURCES_CHECKING) is enabled, you must define {{ item }}"
  when: COMMON_EXTRA_CONFIGURATION_SOURCES_CHECKING and ({{ item }} is not defined or {{ item }} != True)
  with_items: "{{ COMMON_EXTRA_CONFIGURATION_SOURCES }}"
  tags:
    - "install"
    - "install:configuration"

# ubuntu
- stat:
    path: "{{ item }}"
  with_items:
      - "/usr/local/share/ca-certificates"
      - "/usr/sbin/update-ca-certificates"
  register: update_ca_certificates

- name: Download digicert intermediate Certificate
  get_url:
    url: "{{ common_digicert_base_url }}/{{ common_digicert_name }}.pem"
    dest: "/usr/local/share/ca-certificates/{{ common_digicert_name }}"
    validate_certs: no
  when: update_ca_certificates is defined and update_ca_certificates.results[0].stat.exists == True

- name: Update CA Certificates
  shell: /usr/sbin/update-ca-certificates
  when: update_ca_certificates is defined and update_ca_certificates.results[1].stat.exists == True

# ec2-linux
- stat:
    path: /usr/bin/update-ca-trust
  register: update_ca_trust

- name: Update CA Trust
  shell: /usr/bin/update-ca-trust
  when: update_ca_trust is defined and update_ca_trust.stat.exists == True


- name: Add common_users
  # This is the default user for nginx
  user:
    name: "{{ item }}"
    shell: /bin/false
  with_items:
    - "{{ common_web_user }}"
    - "{{ common_log_user }}"

# Determine if machine is provisioned via vagrant
# Some EC2-specific steps would need to be skipped
- name: check if instance is vagrant
  stat:
    path: /home/vagrant
  register: vagrant_home_dir

# Ensure that we get a current version of Git
# GitHub requires version 1.7.10 or later
# https://help.github.com/articles/https-cloning-errors
#- name: Add git apt repository
#  apt_repository:
#    repo: "{{ common_git_ppa }}"
#  when: ansible_distribution in common_debian_variants

- name: Add ppa for watchman package
  apt_repository:
    repo: "ppa:linuxuprising/apps"
  when: >
      ansible_distribution in common_debian_variants and 
      ({{ devstack | default(False) }} or {{ edx_django_service_is_devstack | default(False) }})
  tags:
    - "devstack"

# Ensure that we can install old software if need be.
- name: Add edX PPA apt key
  apt_key:
    id: "{{ COMMON_EDX_PPA_KEY_ID }}"
    keyserver: "{{ COMMON_EDX_PPA_KEY_SERVER }}"
    state: "present"
  when: >
    ansible_distribution in common_debian_variants and
    ansible_distribution_release != 'bionic'

- name: Update expired apt keys
  shell: apt-key adv --recv-keys --keyserver {{ COMMON_EDX_PPA_KEY_SERVER }} {{ COMMON_EDX_PPA_KEY_ID }}
  when: >
    ansible_distribution in common_debian_variants and
    ansible_distribution_release != 'bionic'


- name: Add custom edX PPA
  # Ensure that we get the latest version of python 2.7
  # MySQL 5.6 is from our own PPA: https://bugs.mysql.com/bug.php?id=84848
  apt_repository:
    repo: "{{ COMMON_EDX_PPA }}"
  when: >
    ansible_distribution in common_debian_variants and
    ansible_distribution_release != 'bionic'


- name: Install role-independent useful system packages
  # do this before log dir setup; rsyslog package guarantees syslog user present
  apt:
    name: "{{ common_debian_pkgs }}"
    install_recommends: yes
    state: present
    update_cache: yes
  when: ansible_distribution in common_debian_variants

- name: Install role-independent packages useful for devstack.
  apt:
    name: "{{ common_debian_devstack_pkgs }}"
    install_recommends: yes
    state: present
    update_cache: yes
  when: >
      ansible_distribution in common_debian_variants and 
      ({{ devstack | default(False) }} or {{ edx_django_service_is_devstack | default(False) }})
  tags:
    - "devstack"


- name: Install role-independent useful system packages from custom PPA
  apt:
    name: "{{ old_python_debian_pkgs }}"
    install_recommends: yes
    state: present
    update_cache: yes
  when: >
    ansible_distribution in common_debian_variants and
    ansible_distribution_release in old_python_ppa_releases and
    ansible_distribution_release != 'bionic'

- name: Install role-independent useful system packages
  yum:
    name: "{{ common_redhat_pkgs }}"
    state: present
    update_cache: yes
  when: ansible_distribution in common_redhat_variants


- name: Create common directories
  file:
    path: "{{ item.path }}"
    state: "{{ item.state | default('directory') }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "0755"
  with_items: "{{ common_directories }}"
  tags:
    - install
    - install:configuration
    - common_directories

- name: upload sudo config for key forwarding as root
  copy:
    src: ssh_key_forward
    dest: /etc/sudoers.d/ssh_key_forward
    validate: 'visudo -c -f %s'
    owner: root
    group: root
    mode: "0440"

- name: pip install virtualenv
  pip:
    name: "{{ common_pip_pkgs }}"
    state: present
    extra_args: "-i {{ COMMON_PYPI_MIRROR_URL }}"
  when: ansible_distribution in common_debian_variants


- name: update /etc/hosts
  template:
    src: hosts.j2
    dest: /etc/hosts
  when: COMMON_HOSTNAME|length > 0
  register: etc_hosts

- name: update /etc/hostname
  template:
    src: hostname.j2
    dest: /etc/hostname
  when: COMMON_HOSTNAME|length > 0
  register: etc_hostname

- name: run hostname
  shell: hostname -F /etc/hostname
  when: COMMON_HOSTNAME|length >0 and (etc_hosts.changed or etc_hostname.changed)

- name: Copy the templates to their respective destination
  template:
    dest: "{{ item.dest }}"
    src: "{{ item.src }}"
    owner: root
    group: root
    mode: "{{ item.mode | default(0644) }}"
  register: config_templates
  with_items:
    - { src: 'edx_rsyslog.j2', dest: '/etc/rsyslog.d/99-edx.conf' }
    - { src: 'etc/logrotate.d/hourly/edx_logrotate.j2', dest: '/etc/logrotate.d/hourly/edx-services' }
    - { src: 'etc/cron.hourly/logrotate.j2', dest: '/etc/cron.hourly/logrotate', mode: '0555' }
    - { src: 'etc/logrotate.d/hourly/edx_logrotate_tracking_log.j2', dest: '/etc/logrotate.d/hourly/tracking.log' }

  # TODO: restarts no matter which template has changed, need to examine
  # the results
- name: restart rsyslogd
  service:
    name: rsyslog
    state: restarted
  become: True
  when: config_templates.changed

- name: Add ntp alert script
  template:
    src: "log-ntp-alerts.sh.j2"
    dest: "{{ COMMON_BIN_DIR }}/log-ntp-alerts.sh"
    owner: root
    group: root
    mode: "0755"

# this script is executed by PAM on interactive login to calculate the
# number of package updates available for the MOTD.  This slows down
# first login on machines by a significant amount
- name: Remove MOTD update checker
  file:
    dest: "/etc/update-motd.d/90-updates-available"
    state: absent
  tags:
    - install
    - install:configuration

- name: Set up a cron job to run the log-ntp-alerts script
  cron:
    name: "log-ntp-alerts"
    job: "{{ COMMON_BIN_DIR }}/log-ntp-alerts.sh >/dev/null 2>&1"

- name: install logrotate configuration
  template:
    src: etc/logrotate.d/ntp.j2
    dest: /etc/logrotate.d/ntp
  tags:
    - "install"
    - "install:configuration"
    - "logrotate"
