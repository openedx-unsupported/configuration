# requires:
#  - group_vars/all
#  - common/tasks/main.yml
#  - nginx/tasks/main.yml
---

- name: certificates | create certificates user {{ certs_user }}
  user:
    name={{certs_user}} state=present shell=/bin/bash home={{certs_home}} createhome=yes
  tags:
  - certificates
  - install
  - update

- name: certificates | create location for gpg information
  file: state=directory path={{certs_home}}/.gpg mode=0700 owner={{certs_user}} 
  tags:
  - certificates
  - install
  - update

- name: certificates | put gpg information in place
  copy: src={{secure_dir}}/files/{{item}} dest={{cert_gpg}}/{{item}} mode=0400 owner={{certs_user}} 
  with_items:
  - gpg.conf
  - pubring.gpg
  - secring.gpg
  tags:
  - certificates
  - install
  - update

- name: certificates | create certificates log location
  file: state=directory path={{certs_logs_dir}} mode=0770 owner={{certs_user}} group=adm
  tags:
  - certificates
  - install
  - update

- name: certificates | upload ssh script
  copy: src=git_ssh.sh dest=/tmp/git_ssh.sh force=yes owner=root group=adm mode=750
  tags:
  - certificates
  - install
  - update

- name: certificates | install read-only ssh key for the certs repo
  copy: src={{secure_dir}}/files/git-identity dest=/{{certs_home}}/git-identity force=yes owner={{certs_user}} group=adm mode=600
  tags:
  - certificates
  - install
  - update

- name: certificates | checkout certificate code
  git: dest={{certs_home}}/src repo={{certs_repo}} version={{certs_ver}}
  environment:
    GIT_SSH: /tmp/git_ssh.sh
  tags:
  - certificates
  - install
  - deploy

- name: certificates | fixup permissions on repo
  # TODO: after remote_user is available in ansible dist, use that in the above task instead of manual perms fixup
  file: path={{certs_home}}/src state=directory recurse=yes owner={{certs_user}} group=adm mode=755
  tags:
  - certificates
  - install
  - deploy
  
- name: certificates | install prerequisites
  pip: requirements={{certs_home}}/src/requirements.txt virtualenv={{certs_venv_dir}} state=present
  tags:
  - certificates
  - install
  - update

- name: certificates | install env
  template: src=certificates.env.json.j2 dest={{certs_home}}/env.json mode=640 owner={{certs_user}} group=adm
  tags:
  - certificates
  - install
  - update
  - deploy

- name: certificates | install auth
  template: src=certificates.auth.json.j2 dest={{certs_home}}/auth.json mode=640 owner={{certs_user}} group=adm
  tags:
  - certificates
  - install
  - update
  - deploy

- name: certifier | install bash_profile
  copy: src=../../common/files/bash_profile dest={{certs_home}}/.bash_profile owner={{certs_user}} group={{certs_user}}
  tags:
  - certificates
  - install
  - update
  - deploy

- name: certifier | setup certifier shell environment
  template: src=certifier_shell_env.j2 dest={{certs_home}}/certifier_env owner={{certs_user}} group={{certs_user}}
  tags:
  - certificates
  - install
  - update

- name: certifier | ensure .bashrc exists and sources shell environment
  lineinfile: 
    dest={{certs_home}}/.bashrc create=yes state=present insertbefore=BOF
    regexp='source {{certs_home}}/certifier_env' line='source {{certs_home}}/certifier_env' 
    mode=640 owner={{certs_user}} group=adm
  tags:
  - certificates
  - install
  - update

- name: certifier | add source venv to .bashrc
  lineinfile:
    dest={{certs_home}}/.bashrc create=yes state=present insertafter=EOF
    regexp='source {{certs_venv_dir}}/bin/activate' line='source {{certs_venv_dir}}/bin/activate' 
    mode=640 owner={{certs_user}} group=adm
  tags:
  - certifier
  - install
  - update

- name: certifier | supervisord config for certificate-agent
  template: src=certifier-cert-agent-supervisor.j2 dest=/etc/supervisor/conf.d/certifier-cert-agent.conf
  notify: certifier | restart certificate-agent
  tags:
  - notifier
  - install
  - update

### TODO: still have to do all the startup and gunicorn things (below)

