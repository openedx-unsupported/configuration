- name: create supervisor scripts - ora, ora_celery
  template: >
    src={{ item }}.conf.j2 dest={{ supervisor_available_dir }}/{{ item }}.conf
    owner={{ supervisor_user }} group={{ common_web_user }} mode=0644
  with_items: ['ora', 'ora_celery']

- name: enable supervisor scripts - ora, ora_celery
  file: >
    src={{ supervisor_available_dir }}/{{ item }}.conf
    dest={{ supervisor_cfg_dir }}/{{ item }}.conf
    state=link
    force=yes
    owner={{ supervisor_user }}
    group={{ common_web_user }}
    mode=0644
  notify:
    - restart ora
    - restart ora_celery
  with_items: ['ora', 'ora_celery']
  when: not disable_edx_services

- include: ease.yml

- name: create ora application config
  template: src=ora.env.json.j2 dest={{ora_app_dir}}/ora.env.json
  sudo_user: "{{ ora_user }}"

- name: create ora auth file
  template: src=ora.auth.json.j2 dest={{ora_app_dir}}/ora.auth.json
  sudo_user: "{{ ora_user }}"

- name: setup the ora env
  notify:
  - "restart ora"
  - "restart ora_celery"
  template: >
    src=ora_env.j2 dest={{ ora_app_dir }}/ora_env
    owner={{ ora_user }} group={{ common_web_user }}
    mode=0644

# Do A Checkout
- name: git checkout ora repo into {{ ora_app_dir }}
  git: >
    dest={{ ora_code_dir }} repo={{ ora_source_repo }} version={{ ora_version }}
    accept_hostkey=yes
  sudo_user: "{{ ora_user }}"
  notify:
    - restart ora
    - restart ora_celery

# TODO: Check git.py _run_if_changed() to see if the logic there to skip running certain
# portions of the deploy needs to be incorporated here.


# Install the python pre requirements into {{ ora_venv_dir }}
- name: install python pre-requirements
  pip: >
    requirements="{{ ora_pre_requirements_file }}" virtualenv="{{ ora_venv_dir }}" state=present
    extra_args="-i {{ COMMON_PYPI_MIRROR_URL }}"
  sudo_user: "{{ ora_user }}"
  notify:
    - restart ora
    - restart ora_celery

# Install the python post requirements into {{ ora_venv_dir }}
- name: install python post-requirements
  pip: >
    requirements="{{ ora_post_requirements_file }}" virtualenv="{{ ora_venv_dir }}" state=present
    extra_args="-i {{ COMMON_PYPI_MIRROR_URL }}"
  sudo_user: "{{ ora_user }}"
  notify:
    - restart ora
    - restart ora_celery

  #Needed if using redis to prevent memory issues
- name: change memory commit settings -- needed for redis
  command: sysctl vm.overcommit_memory=1
  notify:
    - restart ora
    - restart ora_celery

- name: syncdb and migrate
  shell: SERVICE_VARIANT=ora {{ora_venv_dir}}/bin/django-admin.py syncdb --migrate --noinput --settings=edx_ora.aws --pythonpath={{ora_code_dir}}
  when: migrate_db is defined and migrate_db|lower == "yes"
  sudo_user: "{{ ora_user }}"
  notify:
    - restart ora
    - restart ora_celery

- name: create users
  shell: SERVICE_VARIANT=ora {{ora_venv_dir}}/bin/django-admin.py update_users --settings=edx_ora.aws --pythonpath={{ora_code_dir}}
  sudo_user: "{{ ora_user }}"
  notify:
    - restart ora
    - restart ora_celery


  # call supervisorctl update. this reloads
  # the supervisorctl config and restarts
  # the services if any of the configurations
  # have changed.
  #
- name: update supervisor configuration
  shell:  "{{ supervisor_ctl }} -c {{ supervisor_cfg }} update"
  register: supervisor_update
  when: not disable_edx_services
  changed_when: supervisor_update.stdout != ""

- name: ensure ora is started
  supervisorctl_local: >
    name=ora
    supervisorctl_path={{ supervisor_ctl }}
    config={{ supervisor_cfg }}
    state=started
  when: not disable_edx_services

- name: ensure ora_celery is started
  supervisorctl_local: >
    name=ora_celery
    supervisorctl_path={{ supervisor_ctl }}
    config={{ supervisor_cfg }}
    state=started
  when: not disable_edx_services

- name: create a symlink for venv python
  file: >
    src="{{ ora_venv_bin }}/{{ item }}"
    dest={{ COMMON_BIN_DIR }}/{{ item }}.ora
    state=link
  with_items:
  - python
  - pip

- set_fact: ora_installed=true
