- name: setup the edxapp env
  template: >
    src=edxapp_env.j2 dest={{ edxapp_app_dir }}/edxapp_env
    owner={{ edxapp_user }}  group={{ common_web_user }}
    mode=0644

- name: create edxapp configuration dir
  file: >
    path="{{ EDXAPP_CFG_DIR }}" state=directory
    owner="{{ edxapp_user }}" group="{{ common_web_group }}"

# Optional auth for git
- name: create ssh script for git (not authenticated)
  template: >
    src=git_ssh_noauth.sh.j2 dest={{ edxapp_git_ssh }}
    owner={{ edxapp_user }} mode=750
  when: not EDXAPP_USE_GIT_IDENTITY

- name: create ssh script for git (authenticated)
  template: >
    src=git_ssh_auth.sh.j2 dest={{ edxapp_git_ssh }}
    owner={{ edxapp_user }} mode=750
  when: EDXAPP_USE_GIT_IDENTITY

- name: install read-only ssh key
  copy: >
    content="{{ EDXAPP_GIT_IDENTITY }}" dest={{ edxapp_git_identity }}
    force=yes owner={{ edxapp_user }} mode=0600
  when: EDXAPP_USE_GIT_IDENTITY

- name: set git fetch.prune to ignore deleted remote refs
  shell: git config --global fetch.prune true
  sudo_user: "{{ edxapp_user }}"

# Do A Checkout
- name: checkout edx-platform repo into {{ edxapp_code_dir }}
  git: >
    dest={{ edxapp_code_dir }}
    repo={{ edx_platform_repo }}
    version={{ edx_platform_version }}
    accept_hostkey=yes
  sudo_user: "{{ edxapp_user }}"
  environment:
    GIT_SSH: "{{ edxapp_git_ssh }}"
  register: edxapp_platform_checkout

- name: git clean after checking out edx-platform
  shell: cd {{ edxapp_code_dir }} && git clean -xdf
  sudo_user: "{{ edxapp_user }}"

- name: checkout theme
  git: >
    dest={{ edxapp_app_dir }}/themes/{{ edxapp_theme_name }}
    repo={{ edxapp_theme_source_repo }}
    version={{ edxapp_theme_version }}
    accept_hostkey=yes
  when: edxapp_theme_name != ''
  sudo_user: "{{ edxapp_user }}"
  environment:
    GIT_SSH: "{{ edxapp_git_ssh }}"
  register: edxapp_theme_checkout

- name: create checksum for requirements, package.json and Gemfile
  shell: >
    /usr/bin/md5sum {{ " ".join(edxapp_chksum_req_files) }} 2>/dev/null > /var/tmp/edxapp.req.new
  sudo_user: "{{ edxapp_user }}"
  ignore_errors: true

- stat: path=/var/tmp/edxapp.req.new
  register: new
  sudo_user: "{{ edxapp_user }}"

- stat: path=/var/tmp/edxapp.req.installed
  register: inst
  sudo_user: "{{ edxapp_user }}"

# Substitute github mirror in all requirements files
# This is run on every single deploy
- name: Updating requirement files for git mirror
  command: |
    /bin/sed -i -e 's/github\.com/{{ COMMON_GIT_MIRROR }}/g' {{ " ".join(edxapp_all_req_files) }}
  sudo_user: "{{ edxapp_user }}"

# Ruby plays that need to be run after platform updates.
- name: Updating Gemfile for rubygems mirror
  command: |
    /bin/sed -i -e 's/https:\/\/rubygems.org/{{ COMMON_RUBYGEMS_MIRROR_URL }}/g' {{ edxapp_code_dir }}/Gemfile
  sudo_user: "{{ edxapp_user }}"

- name: gem install bundler
  shell: >
    gem install bundle
    chdir={{ edxapp_code_dir }}
    executable=/bin/bash
  environment: "{{ edxapp_environment }}"
  sudo_user: "{{ edxapp_user }}"

- name: bundle install
  shell: >
    bundle install --binstubs
    chdir={{ edxapp_code_dir }}
    executable=/bin/bash
  sudo_user: "{{ edxapp_user }}"
  environment: "{{ edxapp_environment }}"

# Set the npm registry
# This needs to be done as root since npm is weird about
# chown - https://github.com/npm/npm/issues/3565
- name: Set the npm registry
  shell:
    npm config set registry '{{ COMMON_NPM_MIRROR_URL }}'
    creates="{{ edxapp_app_dir }}/.npmrc"
  environment: "{{ edxapp_environment }}"

# Set the npm registry permissions
- name: Set the npm registry permissions
  file:
    path="{{ edxapp_app_dir }}/.npmrc"
    owner=edxapp group=edxapp

# Node play that need to be run after platform updates.
- name: Install edx-platform npm dependencies
  shell: npm install chdir={{ edxapp_code_dir }}
  sudo_user: "{{ edxapp_user }}"
  environment: "{{ edxapp_environment }}"


# Install the python pre requirements into {{ edxapp_venv_dir }}
- name : install python pre-requirements
  pip: >
    requirements="{{ pre_requirements_file }}"
    virtualenv="{{ edxapp_venv_dir }}"
    state=present
    extra_args="-i {{ COMMON_PYPI_MIRROR_URL }} --exists-action w"
  sudo_user: "{{ edxapp_user }}"
  environment: "{{ edxapp_environment }}"
  when: not inst.stat.exists or new.stat.md5 != inst.stat.md5

# Install the python modules into {{ edxapp_venv_dir }}
- name : install python base-requirements
  # Need to use shell rather than pip so that we can maintain the context of our current working directory; some
  # requirements are pathed relative to the edx-platform repo. Using the pip from inside the virtual environment implicitly
  # installs everything into that virtual environment.
  shell: >
    {{ edxapp_venv_dir }}/bin/pip install -i {{ COMMON_PYPI_MIRROR_URL }} --exists-action w --use-mirrors -r {{ base_requirements_file }}
    chdir={{ edxapp_code_dir }}
  environment: "{{ edxapp_environment }}"
  sudo_user: "{{ edxapp_user }}"
  when: not inst.stat.exists or new.stat.md5 != inst.stat.md5

# Install the python post requirements into {{ edxapp_venv_dir }}
- name : install python post-requirements
  pip: >
    requirements="{{ post_requirements_file }}"
    virtualenv="{{ edxapp_venv_dir }}"
    state=present
    extra_args="-i {{ COMMON_PYPI_MIRROR_URL }} --exists-action w"
  sudo_user: "{{ edxapp_user }}"
  environment: "{{ edxapp_environment }}"
  when: not inst.stat.exists or new.stat.md5 != inst.stat.md5

# Install the python paver requirements into {{ edxapp_venv_dir }}
- name : install python paver-requirements
  pip: >
    requirements="{{ paver_requirements_file }}"
    virtualenv="{{ edxapp_venv_dir }}"
    state=present
    extra_args="-i {{ COMMON_PYPI_MIRROR_URL }} --exists-action w"
  sudo_user: "{{ edxapp_user }}"
  environment: "{{ edxapp_environment }}"
  when: not inst.stat.exists or new.stat.md5 != inst.stat.md5

# Install the python custom requirements into {{ edxapp_venv_dir }}

- stat: path="{{ custom_requirements_file }}"
  register: custom_requirements
  sudo_user: "{{ edxapp_user }}"

- name : install python custom-requirements
  pip: >
    requirements="{{ custom_requirements_file }}"
    virtualenv="{{ edxapp_venv_dir }}"
    state=present
    extra_args="-i {{ COMMON_PYPI_MIRROR_URL }} --exists-action w"
  sudo_user: "{{ edxapp_user }}"
  environment: "{{ edxapp_environment }}"
  when: custom_requirements.stat.exists and new.stat.md5 != inst.stat.md5

# Install the final python modules into {{ edxapp_venv_dir }}
- name : install python post-post requirements
  # Need to use shell rather than pip so that we can maintain the context of our current working directory; some
  # requirements are pathed relative to the edx-platform repo. Using the pip from inside the virtual environment implicitly
  # installs everything into that virtual environment.
  shell: >
    {{ edxapp_venv_dir }}/bin/pip install -i {{ COMMON_PYPI_MIRROR_URL }} --exists-action w --use-mirrors -r {{ item }}
    chdir={{ edxapp_code_dir }}
  with_items:
  - "{{ github_requirements_file }}"
  - "{{ local_requirements_file }}"
  sudo_user: "{{ edxapp_user }}"

# Private requriements require a ssh key to install, use the same key as the private key for edx-platform
# If EDXAPP_INSTALL_PRIVATE_REQUIREMENTS is set to true EDXAPP_USE_GIT_IDENTITY must also be true
- name : install python private requirements
  # Need to use shell rather than pip so that we can maintain the context of our current working directory; some
  # requirements are pathed relative to the edx-platform repo. Using the pip from inside the virtual environment implicitly
  # installs everything into that virtual environment.
  shell: >
    {{ edxapp_venv_dir }}/bin/pip install -i {{ COMMON_PYPI_MIRROR_URL }} --exists-action w --use-mirrors -r {{ item }}
    chdir={{ edxapp_code_dir }}
  with_items:
  - "{{ private_requirements_file }}"
  sudo_user: "{{ edxapp_user }}"
  environment:
    GIT_SSH: "{{ edxapp_git_ssh }}"
  when: EDXAPP_INSTALL_PRIVATE_REQUIREMENTS

# Install any custom extra requirements if defined in EDXAPP_EXTRA_REQUIREMENTS.
- name: install python extra requirements
  pip: >
    name="{{ item.name }}"
    {% if 'version' in item %}version="{{ item.version }}"{% endif %}
    extra_args="--exists-action w --use-mirrors {{ item.extra_args|default('') }}"
    virtualenv="{{ edxapp_venv_dir }}"
    state=present
  with_items: EDXAPP_EXTRA_REQUIREMENTS
  sudo_user: "{{ edxapp_user }}"

# If using CAS and you have a function for mapping attributes, install
# the module here.  The next few tasks set up the python code sandbox
- name: install CAS attribute module
  pip: >
    name="{{ EDXAPP_CAS_ATTRIBUTE_PACKAGE }}"
    virtualenv="{{ edxapp_venv_dir }}"
    state=present
    extra_args="-i {{ COMMON_PYPI_MIRROR_URL }} --exists-action w --use-mirrors"
  sudo_user: "{{ edxapp_user }}"
  when: EDXAPP_CAS_ATTRIBUTE_PACKAGE|length > 0

# Install the sandbox python modules into {{ edxapp_venv_dir }}
- name : install sandbox requirements into regular venv
  # Need to use shell rather than pip so that we can maintain the context of our current working directory; some
  # requirements are pathed relative to the edx-platform repo. Using the pip from inside the virtual environment implicitly
  # installs everything into that virtual environment.
  shell: >
    {{ edxapp_venv_dir }}/bin/pip install -i {{ COMMON_PYPI_MIRROR_URL }} --exists-action w --use-mirrors -r {{ item }}
    chdir={{ edxapp_code_dir }}
  with_items:
  - "{{ sandbox_base_requirements }}"
  - "{{ sandbox_local_requirements }}"
  - "{{ sandbox_post_requirements }}"
  sudo_user: "{{ edxapp_user }}"
  when: "not EDXAPP_PYTHON_SANDBOX and (not inst.stat.exists or new.stat.md5 != inst.stat.md5)"

# The next few tasks set up the python code sandbox

# need to disable this profile, otherwise the pip inside the sandbox venv has no permissions
# to install anything
- name: code sandbox | put sandbox apparmor profile in complain mode
  command: /usr/sbin/aa-complain /etc/apparmor.d/code.sandbox
  when: EDXAPP_PYTHON_SANDBOX
  tags:
  - edxapp-sandbox

- name: code sandbox | Install base sandbox requirements and create sandbox virtualenv
  pip: >
    requirements="{{ sandbox_base_requirements }}"
    virtualenv="{{ edxapp_sandbox_venv_dir }}"
    state=present
    extra_args="-i {{ COMMON_PYPI_MIRROR_URL }} --exists-action w --use-mirrors"
  sudo_user: "{{ edxapp_sandbox_user }}"
  when: EDXAPP_PYTHON_SANDBOX
  tags:
  - edxapp-sandbox

- name: code sandbox | Install sandbox requirements into sandbox venv
  shell: >
    {{ edxapp_sandbox_venv_dir }}/bin/pip install -i {{ COMMON_PYPI_MIRROR_URL }} --exists-action w --use-mirrors -r {{ item }}
    chdir={{ edxapp_code_dir }}
  with_items:
  - "{{ sandbox_local_requirements }}"
  - "{{ sandbox_post_requirements }}"
  sudo_user: "{{ edxapp_sandbox_user }}"
  when: EDXAPP_PYTHON_SANDBOX
  register: sandbox_install_output
  changed_when: sandbox_install_output.stdout is defined and 'installed' in sandbox_install_output.stdout
  tags:
  - edxapp-sandbox

- name: code sandbox | put code sandbox into aa-enforce or aa-complain mode, depending on EDXAPP_SANDBOX_ENFORCE
  command: /usr/sbin/{{ edxapp_aa_command }} /etc/apparmor.d/code.sandbox
  when: EDXAPP_PYTHON_SANDBOX
  tags:
  - edxapp-sandbox

- name: compiling all py files in the edx-platform repo
  shell: "{{ edxapp_venv_bin }}/python -m compileall -x .git/.* {{ edxapp_code_dir }}"
  sudo_user: "{{ edxapp_user }}"

  # alternative would be to give {{ common_web_user }} read access
  # to the virtualenv but that permission change will require
  # root access.
- name: give other read permissions to the virtualenv
  command: chmod -R o+r "{{ edxapp_venv_dir }}"

- name: create checksum for installed requirements
  shell: cp /var/tmp/edxapp.req.new /var/tmp/edxapp.req.installed
  sudo_user: "{{ edxapp_user }}"


# https://code.launchpad.net/~wligtenberg/django-openid-auth/mysql_fix/+merge/22726
# This is necessary for when syncdb is run and the django_openid_auth module is installed,
# not sure if this fix will ever get merged
- name: openid workaround
  shell: sed -i -e 's/claimed_id = models.TextField(max_length=2047, unique=True/claimed_id = models.TextField(max_length=2047/' {{ edxapp_venv_dir }}/lib/python2.7/site-packages/django_openid_auth/models.py
  when: openid_workaround is defined
  sudo_user: "{{ edxapp_user }}"

# The next few tasks install xml courses.

# Install the xml courses from an s3 bucket
- name: get s3 one time url
  s3: >
    bucket="{{ EDXAPP_XML_S3_BUCKET }}"
    object="{{ EDXAPP_XML_S3_KEY }}"
    mode="geturl"
    expiration=30
  when: not EDXAPP_XML_FROM_GIT and EDXAPP_XML_S3_BUCKET and EDXAPP_XML_S3_KEY
  register: s3_one_time_url

- name: download from one time url
  get_url:
    url="{{ s3_one_time_url.url }}"
    dest="{{ edxapp_data_dir }}/{{ EDXAPP_XML_S3_KEY|basename }}"
    mode=0600
  when: not EDXAPP_XML_FROM_GIT and EDXAPP_XML_S3_BUCKET and EDXAPP_XML_S3_KEY
  register: download_xml_s3

- name: unzip the data to the data dir
  shell: >
    tar xzf {{ edxapp_data_dir }}/{{ EDXAPP_XML_S3_KEY|basename }}
    chdir="{{ edxapp_data_dir }}"
  when: download_xml_s3.changed

# This currently has to be done because
# the course coffescript is compiled on the fly
# by the application after startup.
# See VPC-117 and VPC-122
- name: make the course data web user writable
  file:
    path="{{ edxapp_course_data_dir }}"
    state=directory
    recurse=yes
    owner="{{ common_web_user }}"
    group="{{ edxapp_user }}"

# creates the supervisor jobs for the
# service variants configured, runs
# gather_assets and db migrations
- include: service_variant_config.yml
  tags:
    - service_variant_config
    - deploy

- include: xml.yml
  tags: deploy
  when: EDXAPP_XML_FROM_GIT

  # call supervisorctl update. this reloads
  # the supervisorctl config and restarts
  # the services if any of the configurations
  # have changed.

- name: update supervisor configuration
  shell:  "{{ supervisor_ctl }} -c {{ supervisor_cfg }} update"
  register: supervisor_update
  sudo_user: "{{ supervisor_service_user }}"
  changed_when: supervisor_update.stdout is defined and supervisor_update.stdout != ""
  when: not disable_edx_services

- name: ensure edxapp has started
  supervisorctl_local: >
    state=started
    supervisorctl_path={{ supervisor_ctl }}
    config={{ supervisor_cfg }}
    name="edxapp:{{ item }}"
  sudo_user: "{{ supervisor_service_user }}"
  when: celery_worker is not defined and not disable_edx_services
  with_items: service_variants_enabled

- name: ensure edxapp_workers has started
  supervisorctl_local: >
    name="edxapp_worker:{{ item.service_variant }}_{{ item.queue }}_{{ item.concurrency }}"
    supervisorctl_path={{ supervisor_ctl }}
    config={{ supervisor_cfg }}
    state=started
  when: celery_worker is defined and not disable_edx_services
  with_items: edxapp_workers
  sudo_user: "{{ supervisor_service_user }}"

- name: create symlinks from the venv bin dir
  file: >
    src="{{ edxapp_venv_bin }}/{{ item }}"
    dest={{ COMMON_BIN_DIR }}/{{ item.split('.')[0] }}.edxapp
    state=link
  with_items:
  - python
  - pip
  - django-admin.py

- name: create symlinks from the repo dir
  file: >
    src="{{ edxapp_code_dir }}/{{ item }}"
    dest={{ COMMON_BIN_DIR }}/{{ item.split('.')[0] }}.edxapp
    state=link
  with_items:
  - manage.py

- name: remove read-only ssh key
  file: path={{ edxapp_git_identity }} state=absent
  when: EDXAPP_USE_GIT_IDENTITY

- include: tag_ec2.yml tags=deploy
  when: COMMON_TAG_EC2_INSTANCE

- set_fact: edxapp_installed=true

- name: restart edxapp
  supervisorctl_local: >
    state=restarted
    supervisorctl_path={{ supervisor_ctl }}
    config={{ supervisor_cfg }}
    name="edxapp:{{ item }}"
  when: edxapp_installed is defined and celery_worker is not defined and not disable_edx_services
  sudo_user: "{{ supervisor_service_user }}"
  with_items: service_variants_enabled

- name: restart edxapp_workers
  supervisorctl_local: >
    name="edxapp_worker:{{ item.service_variant }}_{{ item.queue }}_{{ item.concurrency }}"
    supervisorctl_path={{ supervisor_ctl }}
    config={{ supervisor_cfg }}
    state=restarted
  when: edxapp_installed is defined and celery_worker is defined and not disable_edx_services
  with_items: edxapp_workers
  sudo_user: "{{ common_web_user }}"
