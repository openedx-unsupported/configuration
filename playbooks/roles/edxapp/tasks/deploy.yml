# Stop all services.
- name: stop edxapp services
  service: name=edxapp state=stopped
  when: celery_worker is not defined
  tags:
  - lms
  - lms-xml
  - lms-preview
  - cms
  - deploy

- name: stop edx workers
  service: name=edx-workers state=stopped
  when: celery_worker is defined
  tags:
  - deploy

# Do A Checkout
- name: git checkout edx-platform repo into $app_base_dir
  git: dest={{edx_platform_code_dir}} repo={{lms_source_repo}} version={{lms_version}}
  tags:
  - lms
  - cms
  - install
  - deploy

# Do Post Checkout Tasks.
- name: create platform code dir
  file: path={{edx_platform_code_dir}} state=directory owner=www-data group=www-data mode=755
  tags:
  - lms
  - cms
  - install

- name: checkout theme
  git: dest={{app_base_dir}}/themes/{{edxapp_theme_name}} repo={{edxapp_theme_source_repo}} version={{edxapp_theme_version}}
  when: edxapp_theme_name != ''
  tags:
  - cms
  - lms-xml
  - lms-preview
  - lms
  - update
  - deploy


# TODO: Check git.py _run_if_changed() to see if the logic there to skip running certain
# portions of the deploy needs to be incorporated here.

- name: sets permissions on platform code dir and contents
  file: path={{edx_platform_code_dir}} state=directory owner=www-data group=www-data recurse=yes
  # Post Checkout tasks will get run as handlers when the {{ edx_platform_code_dir }} is ready.
  # Look at the handlers/main.yml in this role for a description of the tasks stated below.
  tags:
  - lms
  - cms
  - install
  - deploy

# Ruby plays that need to be run after platform updates.
- name: gem | gem install bundler
  shell: RBENV_ROOT={{ rbenv_root }} GEM_HOME={{ gem_home }} {{ rbenv_root }}/shims/gem install bundle chdir={{ edx_platform_code_dir }}
  tags:
  - ruby
  - deploy
  - install

- name: bundle | bundle install
  shell: RBENV_ROOT={{ rbenv_root }} GEM_HOME={{ gem_home }} {{ gem_home }}/bin/bundle install --binstubs chdir={{ edx_platform_code_dir }}
  tags:
  - ruby
  - deploy
  - install

# Node play that need to be run after platform updates.
- name: Install edx-platform npm dependencies
  shell: npm install chdir={{ edx_platform_code_dir }}
  tags:
  - npm
  - update
  - deploy

# Python plays that need to be run after platform updates.

# Install the python pre requirements into {{ venv_dir }}
- name : install python pre-requirements
  pip: requirements="{{pre_requirements_file}}" virtualenv="{{venv_dir}}" state=present
  tags:
  - lms
  - cms
  - install
  - deploy

# Install the python modules into {{ venv_dir }}
- name : install python base-requirements
  # Need to use shell rather than pip so that we can maintain the context of our current working directory; some
  # requirements are pathed relative to the edx-platform repo. Using the pip from inside the virtual environment implicitly
  # installs everything into that virtual environment.
  shell: cd {{ edx_platform_code_dir }} && {{ venv_dir }}/bin/pip install --exists-action w --use-mirrors -r {{ base_requirements_file }}
  tags:
  - lms
  - cms
  - install
  - deploy

# Install the python post requirements into {{ venv_dir }}
- name : install python post-requirements
  pip: requirements="{{post_requirements_file}}" virtualenv="{{venv_dir}}" state=present
  tags:
  - lms
  - cms
  - install
  - deploy

# Install the final python modules into {{ venv_dir }}
- name : install python post-post requirements
  # Need to use shell rather than pip so that we can maintain the context of our current working directory; some
  # requirements are pathed relative to the edx-platform repo. Using the pip from inside the virtual environment implicitly
  # installs everything into that virtual environment.
  shell: cd {{ edx_platform_code_dir }} && {{ venv_dir }}/bin/pip install --exists-action w --use-mirrors -r {{ item }}
  with_items:
  - "{{ repo_requirements_file }}"
  - "{{ github_requirements_file }}"
  - "{{ local_requirements_file }}"
  tags:
  - lms
  - cms
  - install
  - deploy


# Install the sandbox python modules into {{ venv_dir }}
- name : install sandbox requirements into regular venv
  # Need to use shell rather than pip so that we can maintain the context of our current working directory; some
  # requirements are pathed relative to the edx-platform repo. Using the pip from inside the virtual environment implicitly
  # installs everything into that virtual environment.
  shell: cd {{ edx_platform_code_dir }} && {{ venv_dir }}/bin/pip install --exists-action w --use-mirrors -r {{ item }}
  with_items:
  - "{{ sandbox_base_requirements }}"
  - "{{ sandbox_local_requirements }}"
  - "{{ sandbox_post_requirements }}"
  when: install_sandbox_reqs_into_regular_venv
  tags:
  - lms
  - cms
  - install
  - deploy

- name: changing group ownership to www-data for everything in the venv (workaround)
  shell: chgrp -R www-data {{ venv_dir }}

# This check needs to be run to see if rake can be used but its failure should not stop the run.
- name: check if rake gather_assets is available
  shell: executable=/bin/bash chdir={{ edx_platform_code_dir }} rake -T | grep gather_assets
  environment: "{{ deploy_environment }}"
  register: grep_gather_assets
  ignore_errors: yes
  tags:
  - lms
  - lms-preview
  - lms-xml
  - cms
  - deploy

- name: check if django can collect lms static data
  shell: SERVICE_VARIANT={{ lms_variant }} django-admin.py help collectstatic --pythonpath={{ edx_platform_code_dir }} --settings=lms.envs.aws
  register: check_lms_collect_static
  sudo: yes
  sudo_user: www-data
  environment: "{{ deploy_environment }}"
  ignore_errors: yes
  tags:
  - lms
  - lms-preview
  - lms-xml
  - deploy

- name: check if django can collect cms static data
  shell: SERVICE_VARIANT={{ lms_variant }} django-admin.py help collectstatic --pythonpath={{ edx_platform_code_dir }} --settings=cms.envs.aws
  register: check_cms_collect_static
  sudo: yes
  sudo_user: www-data
  environment: "{{ deploy_environment }}"
  ignore_errors: yes
  tags:
  - cms
  - deploy

- name: check if django can update cms templates
  shell: SERVICE_VARIANT={{ cms_variant }} django-admin.py help update_templates --pythonpath={{ edx_platform_code_dir }} --settings=cms.envs.aws
  register: check_cms_update_templates
  sudo: yes
  sudo_user: www-data
  environment: "{{ deploy_environment }}"
  ignore_errors: yes
  tags:
  - cms
  - deploy

- include: collect_static.yml
  when: celery_worker is not defined

# https://code.launchpad.net/~wligtenberg/django-openid-auth/mysql_fix/+merge/22726
# This is necessary for when syncdb is run and the django_openid_auth module is installed,
# not sure if this fix will ever get merged
# We should never do this in production
- name: openid workaround - NOT FOR PRODUCTION
  shell: sed -i -e 's/claimed_id = models.TextField(max_length=2047, unique=True/claimed_id = models.TextField(max_length=2047/' /opt/edx/lib/python2.7/site-packages/django_openid_auth/models.py
  when: openid_workaround is defined
  tags:
  - deploy
  - lms
  - lms-xml
  - lms-preview
  - cms
  - syncdb

- name: syncdb and migrate
  shell: sudo -u www-data SERVICE_VARIANT=lms /opt/edx/bin/django-admin.py syncdb --migrate --noinput --settings=lms.envs.aws --pythonpath=/opt/wwc/edx-platform
  when: migrate_db is defined and migrate_db|lower == "yes"
  tags:
  - deploy
  - lms
  - lms-xml
  - lms-preview
  - cms
  - syncdb

- name: restart edxapp
  service: name=edxapp state=restarted
  when: celery_worker is not defined
  tags:
  - lms
  - lms-xml
  - lms-preview
  - cms
  - deploy

- name: restart workers
  service: name=edx-workers state=restarted
  when: celery_worker is defined
  tags:
  - deploy
