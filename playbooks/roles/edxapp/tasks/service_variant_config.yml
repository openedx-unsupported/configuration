- name: "create {{ item }} application config"
  template: >
    src={{ item }}.env.json.j2
    dest={{ edxapp_app_dir }}/{{ item }}.env.json
  sudo_user: "{{ edxapp_user }}"
  tags: edxapp_cfg
  with_items: service_variants_enabled

- name: "create {{ item }} auth file"
  template: >
    src={{ item }}.auth.json.j2
    dest={{ edxapp_app_dir }}/{{ item }}.auth.json
  sudo_user: "{{ edxapp_user }}"
  tags: edxapp_cfg
  with_items: service_variants_enabled

- name: "create {{ item }} application config"
  template: >
    src={{ item }}.env.yaml.j2
    dest={{ EDXAPP_CFG_DIR }}/{{ item }}.env.yaml
  sudo_user: "{{ edxapp_user }}"
  tags: edxapp_cfg
  with_items: service_variants_enabled

- name: "create {{ item }} auth file"
  template: >
    src={{ item }}.auth.yaml.j2
    dest={{ EDXAPP_CFG_DIR }}/{{ item }}.auth.yaml
  sudo_user: "{{ edxapp_user }}"
  tags: edxapp_cfg
  with_items: service_variants_enabled


# write the supervisor scripts for the service variants

- name: "writing {{ item }} supervisor script"
  template: >
    src={{ item }}.conf.j2 dest={{ supervisor_available_dir }}/{{ item }}.conf
    owner={{ supervisor_user }}
    group={{ supervisor_user }}
  with_items: service_variants_enabled
  sudo_user: "{{ supervisor_user }}"

- name: writing edxapp supervisor script
  template: >
    src=edxapp.conf.j2 dest={{ supervisor_available_dir }}/edxapp.conf
    owner={{ supervisor_user }}
    group={{ supervisor_user }}
  sudo_user: "{{ supervisor_user }}"

- name: "add gunicorn configuration files"
  template: >
    src={{ item }}_gunicorn.py.j2 dest={{ edxapp_app_dir }}/{{ item }}_gunicorn.py
  with_items: service_variants_enabled
  sudo_user: "{{ edxapp_user }}"

# write the supervisor script for celery workers

- name: writing celery worker supervisor script
  template: >
    src=workers.conf.j2 dest={{ supervisor_available_dir }}/workers.conf
    owner={{ supervisor_user }}
    group={{ supervisor_user }}
  sudo_user: "{{ supervisor_user }}"

# Enable the supervisor jobs
- name: "enable {{ item }} supervisor script"
  file: >
    src={{ supervisor_available_dir }}/{{ item }}.conf
    dest={{ supervisor_cfg_dir }}/{{ item }}.conf
    state=link
    force=yes
  with_items: service_variants_enabled
  when: celery_worker is not defined and not disable_edx_services
  sudo_user: "{{ supervisor_user }}"

- name: "enable edxapp supervisor script"
  file: >
    src={{ supervisor_available_dir }}/edxapp.conf
    dest={{ supervisor_cfg_dir }}/edxapp.conf
    state=link
    force=yes
  when: celery_worker is not defined and not disable_edx_services
  sudo_user: "{{ supervisor_user }}"

- name: "enable celery worker supervisor script"
  file: >
    src={{ supervisor_available_dir }}/workers.conf
    dest={{ supervisor_cfg_dir }}/workers.conf
    state=link
    force=yes
  when: celery_worker is defined and not disable_edx_services
  sudo_user: "{{ supervisor_user }}"

- name: create helper scripts for managing edxapp
  template: >
    src=edx/bin/{{ item[0] }}-{{ item[1] }}.j2
    dest={{ COMMON_BIN_DIR }}/{{ item[0] }}-{{ item[1] }}
    owner={{ edxapp_user }}
    mode=0755
  with_nested:
    - edxapp_helper_scripts
    - service_variants_enabled

# Syncdb with migrate when the migrate user is overridden in extra vars
- name: syncdb and migrate
  command: "{{ COMMON_BIN_DIR }}/edxapp-syncdb-{{ item }}"
  when: fake_migrations is not defined and migrate_db is defined and migrate_db|lower == "yes" and COMMON_MYSQL_MIGRATE_PASS and item != "lms-preview"
  environment:
    DB_MIGRATION_USER: "{{ COMMON_MYSQL_MIGRATE_USER }}"
    DB_MIGRATION_PASS: "{{ COMMON_MYSQL_MIGRATE_PASS }}"
    EDX_PLATFORM_SETTINGS_OVERRIDE: "aws_migrate"
  with_items: service_variants_enabled

# Gather assets using paver if possible

- name: gather {{ item }} static assets with paver
  command: "{{ COMMON_BIN_DIR }}/edxapp-update-assets-{{ item }}"
  when: celery_worker is not defined and not devstack and item != "lms-preview"
  with_items: service_variants_enabled
