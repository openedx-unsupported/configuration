---
# Restart Start all services.
- name: restart edxapp
  service: name=edxapp state=restarted
  tags:
  - lms
  - lms-xml
  - lms-preview
  - cms
  - deploy

# Ruby plays that need to be run after platform updates.
- name: gem | gem install bundler
  shell: RBENV_ROOT={{ rbenv_root }} GEM_HOME={{ gem_home }} {{ rbenv_root }}/shims/gem install bundle chdir={{ platform_code_dir }}
  tags:
  - ruby
  - deploy
  - install

- name: bundle | bundle install
  shell: RBENV_ROOT={{ rbenv_root }} GEM_HOME={{ gem_home }} {{ gem_home }}/bin/bundle install --binstubs chdir={{ platform_code_dir }}
  tags:
  - ruby
  - deploy
  - install

# Node play that need to be run after platform updates.
- name: Install edx-platform npm dependencies
  shell: npm install chdir={{ platform_code_dir }}
  tags:
  - npm
  - update

# Python plays that need to be run after platform updates.

# Install the python pre requirements into {{ venv_dir }}
- name : install python pre-requirements
  pip: requirements="{{pre_requirements_file}}" virtualenv="{{venv_dir}}" state=present
  tags:
  - lms
  - cms
  - install

# Install the python modules into {{ venv_dir }}
- name : install python base-requirements
  # Need to use shell rather than pip so that we can maintain the context of our current working directory; some
  # requirements are pathed relative to the edx-platform repo. Using the pip from inside the virtual environment implicitly
  # installs everything into that virtual environment.
  shell: cd {{ platform_code_dir }} && {{ venv_dir }}/bin/pip install --use-mirrors -r {{ base_requirements_file }}
  tags:
  - lms
  - cms
  - install


# Install the python post requirements into {{ venv_dir }}
- name : install python post-requirements
  pip: requirements="{{post_requirements_file}}" virtualenv="{{venv_dir}}" state=present
  tags:
  - lms
  - cms
  - install

# Install the final python modules into {{ venv_dir }}
- name : install python post-post requirements
  # Need to use shell rather than pip so that we can maintain the context of our current working directory; some
  # requirements are pathed relative to the edx-platform repo. Using the pip from inside the virtual environment implicitly
  # installs everything into that virtual environment.
  shell: cd {{ platform_code_dir }} && {{ venv_dir }}/bin/pip install --use-mirrors -r {{ item }}
  with_items:
  - "{{ repo_requirements_file }}"
  - "{{ github_requirements_file }}"
  - "{{ local_requirements_file }}"
  tags:
  - lms
  - cms
  - install

# This check needs to be run to see if rake can be used but its failure should not stop the run.
- name: check if rake gather_assets is available
  shell: executable=/bin/bash chdir={{ platform_code_dir }} rake -T | grep gather_assets
  environment: "{{ deploy_environment }}"
  register: grep_gather_assets
  ignore_errors: yes
  tags:
  - lms
  - lms-preview
  - lms-xml
  - cms
  - deploy

- name: check if django can collect lms static data
  shell: SERVICE_VARIANT={{ lms_variant }} django-admin.py help collectstatic --pythonpath={{ platform_code_dir }} --settings=lms.envs.aws
  register: check_lms_collect_static
  sudo: yes
  sudo_user: www-data
  environment: "{{ deploy_environment }}"
  tags:
  - lms
  - lms-preview
  - lms-xml
  - deploy

- name: check if django can collect cms static data
  shell: SERVICE_VARIANT={{ lms_variant }} django-admin.py help collectstatic --pythonpath={{ platform_code_dir }} --settings=cms.envs.aws
  register: check_cms_collect_static
  sudo: yes
  sudo_user: www-data
  environment: "{{ deploy_environment }}"
  tags:
  - cms
  - deploy

- name: check if django can update cms templates
  shell: SERVICE_VARIANT={{ cms_variant }} django-admin.py help update_templates --pythonpath={{ platform_code_dir }} --settings=cms.envs.aws
  register: check_cms_update_templates
  sudo: yes
  sudo_user: www-data
  environment: "{{ deploy_environment }}"
  tags:
  - cms
  - deploy

# Gather lms assets using rake if possible
- name: gather lms static assets with rake
  shell: executable=/bin/bash chdir={{ platform_code_dir }} SERVICE_VARIANT={{ lms_variant }} rake lms:gather_assets:aws
  when: grep_gather_assets.rc == 0
  notify:
  - restart edxapp
  sudo: yes
  sudo_user: www-data
  environment: "{{ deploy_environment }}"
  tags:
  - lms
  - lms-preview
  - lms-xml
  - deploy

# Gather lms assets using django if necessary(When rake doesn't know how)
- name: gather lms static assets with django
  shell: SERVICE_VARIANT={{ lms_variant }} django-admin.py collectstatic --pythonpath={{ platform_code_dir }} --settings=lms.envs.aws --noinput --verbosity=0
  when: grep_gather_assets.rc != 0 and check_lms_collect_static.rc == 0
  notify:
  - restart edxapp
  sudo: yes
  sudo_user: www-data
  environment: "{{ deploy_environment }}"
  tags:
  - lms
  - lms-preview
  - lms-xml
  - deploy


# Gather cms assets using rake if possible
- name: gather cms static assets with rake
#  script: gather_assets.sh
  shell: executable=/bin/bash chdir={{ platform_code_dir }} SERVICE_VARIANT={{ cms_variant }} rake cms:gather_assets:aws
  when: grep_gather_assets.rc == 0
  notify:
  - restart edxapp
  sudo: yes
  sudo_user: www-data
  environment: "{{ deploy_environment }}"
  tags:
  - cms
  - deploy

- name: gather cms static assets with django
  shell: SERVICE_VARIANT={{ cms_variant }} django-admin.py collectstatic --pythonpath={{ platform_code_dir }} --settings=lms.envs.aws --noinput --verbosity=0
  when: grep_gather_assets.rc != 0 and check_cms_collect_static.rc == 0
  notify:
  - restart edxapp
  sudo: yes
  sudo_user: www-data
  environment: "{{ deploy_environment }}"
  tags:
  - cms
  - deploy

- name: update cms templates
  shell: SERVICE_VARIANT={{ cms_variant }} django-admin.py update_templates --pythonpath={{ platform_code_dir }} --settings=cms.envs.aws
  when: check_cms_update_templates.rc == 0
  notify:
  - restart edxapp
  sudo: yes
  sudo_user: www-data
  environment: "{{ deploy_environment }}"
  tags:
  - cms
  - deploy

# Add failure checks for if no static assets were deployed.
- name: lms asset static failure check
  shell: /bin/false
  when: grep_gather_assets.rc != 0 and check_lms_collect_static.rc != 0
  tags:
  - lms
  - lms-preview
  - lms-xml
  - deploy

- name: cms asset static failure check
  shell: /bin/false
  when: grep_gather_assets.rc != 0 and check_cms_collect_static.rc != 0
  tags:
  - cms
  - deploy
