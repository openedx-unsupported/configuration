# gunicorn
# Templated and placed by ansible from jinja2 source
{% if celery_worker %}
# CMS Celery Worker Upstart Script
description "cms celery worker"

stop on stopping edx-workers

respawn

instance edx.${SERVICE_VARIANT}.core.${QUEUE}

#env NEW_RELIC_CONFIG_FILE=/opt/wwc/newrelic.ini
#env NEWRELIC={{venv_dir}}/bin/newrelic-admin
env CONCURRENCY=${CONCURRENCY}
env LOGLEVEL=info
env DJANGO_SETTINGS_MODULE=cms.envs.aws
env PYTHONPATH={{edx_platform_code_dir}}
env SERVICE_VARIANT=${SERVICE_VARIANT}

setuid www-data

chdir {{edx_platform_code_dir}}

exec {{venv_dir}}/bin/django-admin.py celery worker --settings=$DJANGO_SETTINGS_MODULE --pythonpath=$PYTHONPATH --loglevel=$LOGLEVEL --queues=edx.${SERVICE_VARIANT}.core.${QUEUE} --hostname=edx.${SERVICE_VARIANT}.core.${QUEUE}.`hostname` --concurrency=$CONCURRENCY

{% else %}
description "cms gunicorn"
# CMS Upstart Script
start on started edxapp
stop on stopped edxapp
 
respawn
respawn limit 3 30
 
env PID=/var/tmp/cms.pid
#env NEW_RELIC_CONFIG_FILE={{app_base_dir}}/newrelic.ini
#env NEWRELIC={{venv_dir}}/bin/newrelic-admin
{% if facter_processorcount|int(default="NaN") is number  %}
env WORKERS={{ worker_core_mult.cms * facter_processorcount|int }}
{% elif ansible_processor_cores|int(default="NaN") is number %}
env WORKERS={{ worker_core_mult.cms * ansible_processor_cores|int }}
{% else %}
env WORKERS={{ worker_core_mult.cms }}
{% endif %}
env PORT=8010
env LANG=en_US.UTF-8
env DJANGO_SETTINGS_MODULE=cms.envs.aws
env SERVICE_VARIANT="cms"
 
chdir {{edx_platform_code_dir}}
setuid www-data

exec {{venv_dir}}/bin/gunicorn_django -b 127.0.0.1:$PORT -w $WORKERS --timeout=300 --pythonpath={{edx_platform_code_dir}} --settings=cms.envs.aws
{% endif %}
