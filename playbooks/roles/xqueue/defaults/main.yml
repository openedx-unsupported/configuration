# variables common to the xqueue role, automatically loaded
# when the role is included
---
XQUEUE_SETTINGS: 'production'

XQUEUE_NGINX_PORT: 18040
XQUEUE_NGINX_SSL_PORT: 18041
XQUEUE_GUNICORN_WORKERS_EXTRA: ""
XQUEUE_GUNICORN_WORKERS_EXTRA_CONF: ""

XQUEUE_QUEUES:
  # push queue
  'edX-Open_DemoX': 'http://localhost:18050'
  # pull queues
  'test-pull': !!null
  'certificates': !!null
  'open-ended': !!null
  'open-ended-message': !!null

XQUEUE_LOGGING_ENV: sandbox
XQUEUE_SYSLOG_SERVER: 'localhost'

XQUEUE_UPLOAD_BUCKET: 'sandbox-bucket'
XQUEUE_UPLOAD_PATH_PREFIX: 'sandbox-xqueue'
# You can set this to S3 or Swift, but it will
# default to the django file storage for tests/devstacks
XQUEUE_DEFAULT_FILE_STORAGE: !!null

XQUEUE_LOCAL_LOGLEVEL: 'INFO'

# If you try to use an Instance IAM Role rather than a user key S3 will invalidate the signed
# URLs used in uploaded file submissions.  If you don't upload files on grade submissions, then
# it's ok, the submission is stored directly in the database.
XQUEUE_AWS_ACCESS_KEY_ID : !!null
XQUEUE_AWS_SECRET_ACCESS_KEY : !!null

XQUEUE_SWIFT_USERNAME: !!null
XQUEUE_SWIFT_KEY: !!null
XQUEUE_SWIFT_TENANT_ID: !!null
XQUEUE_SWIFT_TENANT_NAME: !!null
XQUEUE_SWIFT_AUTH_URL: !!null
XQUEUE_SWIFT_AUTH_VERSION: !!null
XQUEUE_SWIFT_REGION_NAME: !!null

XQUEUE_BASIC_AUTH_USER: "{{ COMMON_HTPASSWD_USER }}"
XQUEUE_BASIC_AUTH_PASSWORD: "{{ COMMON_HTPASSWD_PASS }}"
XQUEUE_DJANGO_USERS:
  lms: "{{ COMMON_XQUEUE_LMS_PASSWORD }}"
XQUEUE_LANG: 'en_US.UTF-8'

XQUEUE_MYSQL_DB_NAME: 'xqueue'
XQUEUE_MYSQL_USER: 'xqueue001'
XQUEUE_MYSQL_PASSWORD: 'password'
XQUEUE_MYSQL_HOST: 'localhost'
XQUEUE_MYSQL_PORT: '3306'
XQUEUE_MYSQL_OPTIONS: {}
XQUEUE_MYSQL_CONN_MAX_AGE: 0 # This is Django's default https://docs.djangoproject.com/en/1.11/ref/settings/#conn-max-age

XQUEUE_NEWRELIC_APPNAME: "{{ COMMON_ENVIRONMENT }}-{{ COMMON_DEPLOYMENT }}-xqueue"
XQUEUE_CONSUMER_NEWRELIC_APPNAME: "{{ COMMON_ENVIRONMENT }}-{{ COMMON_DEPLOYMENT }}-xqueue_consumer"
# Set the number of gunicorn front end workers explicitely for xqueue
XQUEUE_WORKERS: !!null

XQUEUE_SESSION_ENGINE: !!null
XQUEUE_CACHES: !!null

# Number of minutes to ignore a pulled/pushed submission before making it available again
XQUEUE_SUBMISSION_PROCESSING_DELAY: 1
# Number of seconds to delay before querying for available push submissions
XQUEUE_CONSUMER_DELAY: 10

XQUEUE_CSRF_COOKIE_SECURE: false
XQUEUE_SESSION_COOKIE_SECURE: false

# This dictionary is defined in XQueue's settings.py
# If you want to set up cloudwatch metrics/alarms this allows
# you a custom setting.
XQUEUE_CLOUDWATCH_QUEUE_COUNT_METRICS: !!null

# Remote config
XQUEUE_HERMES_ENABLED: "{{ COMMON_HERMES_ENABLED }}"

# This block of config is dropped into /edx/etc/xqueue.yml
# and is read in by xqueue.XQUEUE_SETTINGS
XQUEUE_CONFIG:
  XQUEUES: "{{ XQUEUE_QUEUES }}"
  LOGGING_ENV: "{{ XQUEUE_LOGGING_ENV }}"
  SYSLOG_SERVER: "{{ XQUEUE_SYSLOG_SERVER }}"
  LOG_DIR: "{{ COMMON_DATA_DIR }}/logs/xqueue"
  SESSION_ENGINE: "{{ XQUEUE_SESSION_ENGINE }}"
  CACHES: "{{ XQUEUE_CACHES }}"
  LOCAL_LOGLEVEL: "{{ XQUEUE_LOCAL_LOGLEVEL }}"
  UPLOAD_BUCKET: "{{ XQUEUE_UPLOAD_BUCKET }}"
  UPLOAD_PATH_PREFIX: "{{ XQUEUE_UPLOAD_PATH_PREFIX }}"
  DEFAULT_FILE_STORAGE: "{{ XQUEUE_DEFAULT_FILE_STORAGE }}"
  NEWRELIC_APPNAME: "{{ XQUEUE_NEWRELIC_APPNAME }}"
  SUBMISSION_PROCESSING_DELAY: "{{ XQUEUE_SUBMISSION_PROCESSING_DELAY }}"
  CONSUMER_DELAY: "{{ XQUEUE_CONSUMER_DELAY }}"
  AWS_ACCESS_KEY_ID:  "{{ XQUEUE_AWS_ACCESS_KEY_ID }}"
  AWS_SECRET_ACCESS_KEY: "{{ XQUEUE_AWS_SECRET_ACCESS_KEY }}"
  SWIFT_USERNAME: "{{ XQUEUE_SWIFT_USERNAME }}"
  SWIFT_KEY: "{{ XQUEUE_SWIFT_KEY }}"
  SWIFT_TENANT_ID: "{{ XQUEUE_SWIFT_TENANT_ID }}"
  SWIFT_TENANT_NAME: "{{ XQUEUE_SWIFT_TENANT_NAME }}"
  SWIFT_AUTH_URL: "{{ XQUEUE_SWIFT_AUTH_URL }}"
  SWIFT_AUTH_VERSION: "{{ XQUEUE_SWIFT_AUTH_VERSION }}"
  SWIFT_REGION_NAME: "{{ XQUEUE_SWIFT_REGION_NAME }}"
  # This is used by the xqueue consumer in case it needs to send a password protected submission out for a push grader.
  REQUESTS_BASIC_AUTH: ["{{ XQUEUE_BASIC_AUTH_USER }}", "{{XQUEUE_BASIC_AUTH_PASSWORD}}"]
  USERS: "{{ XQUEUE_DJANGO_USERS }}"
  DATABASES:
    default:
      ENGINE: "django.db.backends.mysql"
      NAME: "{{ XQUEUE_MYSQL_DB_NAME }}"
      USER: "{{ XQUEUE_MYSQL_USER }}"
      PASSWORD: "{{ XQUEUE_MYSQL_PASSWORD }}"
      HOST: "{{ XQUEUE_MYSQL_HOST }}"
      PORT: "{{ XQUEUE_MYSQL_PORT }}"
      ATOMIC_REQUESTS: True
      CONN_MAX_AGE: "{{ XQUEUE_MYSQL_CONN_MAX_AGE }}"
      OPTIONS: "{{ XQUEUE_MYSQL_OPTIONS }}"
  NEWRELIC_LICENSE_KEY: "{{ NEWRELIC_LICENSE_KEY | default('') }}"
  CLOUDWATCH_QUEUE_COUNT_METRICS: "{{ XQUEUE_CLOUDWATCH_QUEUE_COUNT_METRICS }}"
  SESSION_COOKIE_SECURE: "{{ XQUEUE_SESSION_COOKIE_SECURE }}"
  CSRF_COOKIE_SECURE: "{{ XQUEUE_CSRF_COOKIE_SECURE }}"

XQUEUE_VERSION: "master"
XQUEUE_GIT_IDENTITY: !!null

XQUEUE_REPOS:
  - PROTOCOL: "{{ COMMON_GIT_PROTOCOL }}"
    DOMAIN: "{{ COMMON_GIT_MIRROR }}"
    PATH: "{{ COMMON_GIT_PATH }}"
    REPO: xqueue.git
    VERSION: "{{ XQUEUE_VERSION }}"
    DESTINATION: "{{ xqueue_code_dir }}"
    SSH_KEY: "{{ XQUEUE_GIT_IDENTITY }}"

# Internal vars below this line
#############################################

xqueue_service_name: "xqueue"

xqueue_app_dir: "{{ COMMON_APP_DIR }}/xqueue"
xqueue_code_dir: "{{ xqueue_app_dir }}/xqueue"
xqueue_data_dir: "{{ COMMON_DATA_DIR }}/xqueue"
xqueue_venvs_dir: "{{ xqueue_app_dir }}/venvs"
xqueue_venv_dir: "{{ xqueue_venvs_dir }}/xqueue"
xqueue_venv_bin: "{{ xqueue_venv_dir }}/bin"

xqueue_user: "xqueue"
xqueue_home: "{{ COMMON_APP_DIR }}/{{ xqueue_service_name }}"

# Default nginx listen port
# These should be overrided if you want
# to serve all content on port 80
xqueue_gunicorn_port: 8040
xqueue_gunicorn_host: 127.0.0.1

xqueue_environment:
  DJANGO_SETTINGS_MODULE: 'xqueue.{{ XQUEUE_SETTINGS }}'
  PATH: '{{ xqueue_venv_bin }}:{{ ansible_env.PATH }}'
  XQUEUE_CFG: '{{ COMMON_CFG_DIR }}/xqueue.yml'

xqueue_requirements_file:      "{{ xqueue_code_dir }}/requirements.txt"
xqueue_openstack_requirements_file: "{{ xqueue_code_dir }}/openstack-requirements.txt"

# These packages are required for the xqueue server,
# copied from the LMS role for now since there is a lot
# of overlap
xqueue_debian_pkgs:
  # for compiling the virtualenv
  # (only needed if wheel files aren't available)
  - build-essential
  - s3cmd
  # mysqlclient wont install without this
  - libssl-dev
  - libmysqlclient-dev
  - ntp
  # Needed to be able to create the xqueue mysqldb.
  # Needed to be able to build wheel for mysqlclient
  - python3-dev
xqueue_release_specific_debian_pkgs:
  xenial:
    - python-mysqldb
  bionic:
    - python-mysqldb
  focal:
    - python3-mysqldb

# flag to run xqueue on python3
xqueue_use_python3: true
