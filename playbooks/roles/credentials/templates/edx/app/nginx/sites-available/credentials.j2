#
# {{ ansible_managed }}
#


{% if nginx_default_sites is defined and "credentials" in nginx_default_sites %}
  {% set default_site = "default_server" %}
{% else %}
  {% set default_site = "" %}
{% endif %}

upstream credentials_app_server {
{% for host in NGINX_CREDENTIALS_GUNICORN_HOSTS %}
    server {{ host }}:{{ credentials_gunicorn_port }} fail_timeout=0;
{% endfor %}
}

server {
  server_name {{ CREDENTIALS_HOSTNAME }};

  {% if NGINX_ENABLE_SSL %}

  listen {{ CREDENTIALS_NGINX_PORT }} {{ default_site }};
  listen {{ CREDENTIALS_SSL_NGINX_PORT }} ssl;

  ssl_certificate /etc/ssl/certs/{{ NGINX_SSL_CERTIFICATE|basename }};
  ssl_certificate_key /etc/ssl/private/{{ NGINX_SSL_KEY|basename }};
  # request the browser to use SSL for all connections
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

  {% else %}
  listen {{ CREDENTIALS_NGINX_PORT }} {{ default_site }};
  {% endif %}

  location ~ ^{{ CREDENTIALS_MEDIA_URL }}(?P<file>.*) {
    root {{ CREDENTIALS_MEDIA_ROOT }};
    try_files /$file =404;
  }

  location ~ ^{{ CREDENTIALS_STATIC_URL }}(?P<file>.*) {
    root {{ CREDENTIALS_STATIC_ROOT }};
    add_header Cache-Control "max-age=31536000";

    # NOTE (CCB): We have invested *numerous* man-hours in attempting to provide a properly-secured CORS implementation.
    # Unfortunately, our efforts have only resulted in a lot of frustration, failure, and new knowledge. For now,
    # given the low risk of exposing these files, we will move forward with the insecure option.
    #
    # References for future explorers:
    # * https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/
    # * https://enable-cors.org/server_nginx.html
    # * http://stackoverflow.com/questions/27955233/nginx-config-for-cors-add-header-directive-is-not-allowed/41467679
    #
    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
    add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';

    if ($request_method = 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' '*';
      add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';

      # Tell client that this pre-flight info is valid for 20 days
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain charset=UTF-8';
      add_header 'Content-Length' 0;
      return 204;
    }

    try_files /$file =404;
  }

  location / {
    try_files $uri @proxy_to_app;
  }

  {% if NGINX_ROBOT_RULES|length > 0 %}
  location /robots.txt {
      root {{ nginx_app_dir }};
      try_files $uri /robots.txt =404;
  }
  {% endif %}

  location @proxy_to_app {
    proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
    proxy_set_header X-Forwarded-Port $http_x_forwarded_port;
    proxy_set_header X-Forwarded-For $http_x_forwarded_for;
    proxy_set_header Host $http_host;

    proxy_redirect off;
    proxy_pass http://credentials_app_server;
  }

  # Forward to HTTPS if we're an HTTP request...
  if ($http_x_forwarded_proto = "http") {
    set $do_redirect "true";
  }

  # Run our actual redirect...
  if ($do_redirect = "true") {
    rewrite ^ https://$host$request_uri? permanent;
  }
}
