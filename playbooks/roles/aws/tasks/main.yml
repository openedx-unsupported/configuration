---
#
# edX Configuration
#
# github:     https://github.com/edx/configuration
# wiki:       https://github.com/edx/configuration/wiki
# code style: https://github.com/edx/configuration/wiki/Ansible-Coding-Conventions
# license:    https://github.com/edx/configuration/blob/master/LICENSE.TXT
#
#
#
# Tasks for role aws
#
# Overview:
#
#
# Dependencies:
#
#
# Example play:
#
#

#
# Start dealing with Jumbo frames issue in mixed MTU deployements in AWS
#
- shell: >
    /sbin/ifconfig eth0 mtu 1500 up
  when: ansible_distribution in common_debian_variants

- lineinfile: >
    dest=/etc/dhcp/dhclient.conf
    regexp="^supercede interfact-mtu"
    line="supercede interface-mtu 1500;"
    insertbefore="^request"
  when: ansible_distribution in common_debian_variants
  
#
# End dealing with Jumbo frames issue in mixed MTU deployements in AWS
#

- name: create all service directories
  file: >
    path="{{ item.value.path }}"
    state="directory"
    owner="{{ item.value.owner }}"
    group="{{ item.value.group }}"
    mode="{{ item.value.mode }}"
  with_dict: aws_dirs

- name: install system packages
  apt: >
    pkg={{','.join(aws_debian_pkgs)}}
    state=present
    update_cache=yes

- name: install aws python packages
  pip: >
    name="{{ item }}" state=present
    extra_args="-i {{ COMMON_PYPI_MIRROR_URL }}"
  with_items: aws_pip_pkgs

- name: get s3cmd
  get_url: >
    url={{ aws_s3cmd_url }}
    dest={{ aws_dirs.data.path }}/

- name: untar s3cmd
  shell: >
    tar xf {{ aws_dirs.data.path }}/{{ aws_s3cmd_version }}.tar.gz
    creates={{ aws_dirs.data.path }}/{{ aws_s3cmd_version }}/s3cmd
    chdir={{ aws_dirs.home.path }}

- name: create symlink for s3cmd
  file: >
    src={{ aws_dirs.home.path }}/{{ aws_s3cmd_version }}/s3cmd
    dest={{ aws_s3cmd }}
    state=link

- name: create s3 log sync script
  template: >
    dest={{ aws_s3_sync_script }}
    src=send-logs-to-s3.j2 mode=0755 owner=root group=root
  when: AWS_S3_LOGS

- name: create symlink for s3 log sync script
  file: >
    state=link
    src={{ aws_s3_sync_script }}
    dest={{ COMMON_BIN_DIR }}/{{ aws_s3_sync_script|basename }}
  when: AWS_S3_LOGS

- name: force logrotate on supervisor stop
  template: >
    src=etc/init/sync-on-stop.conf.j2
    dest=/etc/init/sync-on-stop.conf
    owner=root group=root mode=0644
  when: AWS_S3_LOGS

  # cron job runs the aws s3 sync script
  # this job will log its output to /var/log/aws
- name: cronjob for s3 log sync
  cron:
    name: "cronjob for s3 log sync"
    user: root
    minute: 0
    job: "{{ aws_s3_sync_script }} > /dev/null 2>&1"
    state: absent
  when: AWS_S3_LOGS
