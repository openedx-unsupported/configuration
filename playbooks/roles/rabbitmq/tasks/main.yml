---
# It is recommended that this role be played with serial set to 1 because
# There is a bug with initializing multiple nodes in the HA cluster at once
# http://rabbitmq.1065348.n5.nabble.com/Rabbitmq-boot-failure-with-quot-tables-not-present-quot-td24494.html
#
- name: install packages needed by rabbit
  apt:
    name: "{{ rabbitmq_debian_pkgs }}"
    state: present
    install_recommends: yes
    force: yes
    update_cache: yes
  tags:
    - install
    - install:app-requirements

- name: trust rabbit's packagecloud repository
  apt_key:
    url: "{{ rabbitmq_repo_key }}"
    state: present
  tags:
    - "install"
    - "install:app-requirements"

- name: add rabbit's packagecloud repository
  apt_repository:
    repo: "{{ rabbitmq_repo }}"
    state: present
    update_cache: yes
  tags:
    - "install"
    - "install:app-requirements"

# If we don't set pipefail first, `||` will be looking at the exit code of the last command in the pipe
- name: Check if rabbit is installed
  shell: |
    set -o pipefail
    dpkg -s rabbitmq-server | grep Version | sed -r 's/.*: (.*)/\1/' || echo 'not installed'
  args:
    executable: /bin/bash
  register: installed_version
  tags:
    - "install"
    - "install:app-requirements"

- name: Warn if wrong rabbit version is installed
  debug: msg="Expected rabbitmq version {{ RABBITMQ_VERSION }}, found {{ installed_version.stdout }} - will not upgrade in place"
  when: installed_version.stdout is defined and installed_version.stdout not in [RABBITMQ_VERSION, 'not installed']
  tags:
    - "install"
    - "install:app-requirements"

- name: Install rabbit package
  apt:
    name: "rabbitmq-server={{ RABBITMQ_VERSION }}"
    state: present
    force: yes
    update_cache: yes
  when: installed_version.stdout is defined and installed_version.stdout == "not installed"
  tags:
    - "install"
    - "install:app-requirements"

- name: Stop rabbit cluster
  service:
    name: rabbitmq-server
    state: stopped
  tags:
    - "install"
    - "install:app-configuration"

# In case there are lingering processes, ignore errors
# silently
- name: Send sigterm to any running rabbitmq processes
  shell: "pkill -u rabbitmq || true"
  tags:
    - "install"
    - "install:app-configuration"

- name: Create rabbitmq edx directories
  file:
    path: "{{ item }}"
    owner: "{{ rabbitmq_user }}"
    mode: "0755"
    state: directory
  with_items:
    - "{{ rabbitmq_app_dir }}"
    - "{{ rabbitmq_log_dir }}"
  tags:
    - "install"
    - "install:app-configuration"

- name: Add queue monitoring script
  template:
    src: "edx/app/rabbitmq/log-rabbitmq-queues.sh.j2"
    dest: "{{ rabbitmq_app_dir }}/log-rabbitmq-queues.sh"
    owner: "{{ rabbitmq_user }}"
    group: "{{ rabbitmq_group }}"
    mode: "0755"
  tags:
    - "install"
    - "install:app-configuration"
    - "monitoring"

- name: Add RabbitMQ memory usage script
  template:
    src: "edx/app/rabbitmq/log-rabbitmq-memory.sh.j2"
    dest: "{{ rabbitmq_app_dir }}/log-rabbitmq-memory.sh"
    owner: "{{ rabbitmq_user }}"
    group: "{{ rabbitmq_group }}"
    mode: "0775"
  tags:
    - "install"
    - "install:app-configuration"
    - "monitoring"

- name: Set up a cron job to run queue script
  cron:
    name: "log-queue-lenghts"
    job: /usr/bin/timeout {{ rabbitmq_cron_timeout }} {{ rabbitmq_app_dir }}/log-rabbitmq-queues.sh >/dev/null 2>&1
  tags:
    - "install"
    - "install:app-configuration"
    - "monitoring"

- name: Set up a cron job to run the script
  cron:
    name: "log-rabbitmq-memory-usage"
    job: /usr/bin/timeout {{ rabbitmq_cron_timeout }} {{ rabbitmq_app_dir }}/log-rabbitmq-memory.sh >/dev/null 2>&1
  tags:
    - "install"
    - "install:app-configuration"
    - "monitoring"

- name: install logrotate configuration
  template:
    src: etc/logrotate.d/rabbitmq.j2
    dest: /etc/logrotate.d/rabbitmq
  tags:
    - "install"
    - "install:app-configuration"
    - "logrotate"

# Defaulting to /var/lib/rabbitmq
- name: Create cookie directory
  file:
    path: "{{ rabbitmq_cookie_dir }}"
    state: directory
    owner: rabbitmq
    group: rabbitmq
    mode: "0755"
  tags:
    - "install"
    - "install:app-configuration"

- name: Add rabbitmq erlang cookie
  template:
    src: "erlang.cookie.j2"
    dest: "{{ rabbitmq_cookie_location }}"
    owner: rabbitmq
    group: rabbitmq
    mode: "0400"
  register: erlang_cookie
  tags:
    - "install"
    - "install:app-configuration"

# Defaulting to /etc/rabbitmq
- name: Create rabbitmq config directory
  file:
    path: "{{ rabbitmq_config_dir }}"
    state: directory
    owner: root
    group: root
    mode: "0755"
  tags:
    - "install"
    - "install:app-configuration"

- name: Add rabbitmq environment configuration
  template:
    src: "rabbitmq-env.conf.j2"
    dest: "{{ rabbitmq_config_dir }}/rabbitmq-env.conf"
    owner: root
    group: root
    mode: "0644"
  tags:
    - "install"
    - "install:app-configuration"

- name: Add rabbitmq cluster configuration
  template:
    src: "etc/rabbitmq/rabbitmq.config.j2"
    dest: "{{ rabbitmq_config_dir }}/rabbitmq.config"
    owner: root
    group: root
    mode: "0644"
  register: cluster_configuration
  tags:
    - "install"
    - "install:app-configuration"

- name: Install plugins
  rabbitmq_plugin:
    names: "{{ item }}"
    state: enabled
  with_items: "{{ rabbitmq_plugins }}"
  tags:
    - "install"
    - "install:app-configuration"

# When rabbitmq starts up it creates a folder of metadata at '/var/lib/rabbitmq/mnesia'.
# This folder should be deleted before clustering is setup because it retains data
# that can conflict with the clustering information.
- name: Remove mnesia configuration
  file:
    path: "{{ rabbitmq_mnesia_folder }}"
    state: absent
  when: erlang_cookie.changed or cluster_configuration.changed or rabbitmq_refresh
  tags:
    - "install"
    - "install:app-configuration"

- name: Start rabbit nodes
  service:
    name: rabbitmq-server
    state: started
  tags:
    - "install"
    - "install:app-configuration"

- name: Wait for rabbit to start
  wait_for:
    port: "{{ rabbitmq_management_port }}"
    delay: 2
  tags:
    - "install"
    - "install:app-configuration"

- name: Remove guest user
  rabbitmq_user:
    user: "guest"
    state: absent
  tags:
    - users
    - maintenance
    - "manage"
    - "manage:app-users"

- name: Add vhosts
  rabbitmq_vhost:
    name: "{{ item }}"
    state: present
  with_items: "{{ RABBITMQ_VHOSTS }}"
  tags:
    - vhosts
    - maintenance
    - "install"
    - "install:app-configuration"

- set_fact:
    permissions: "{{ permissions|default([])+[{'vhost':item,'configure_priv':'.*','read_priv':'.*','write_priv':'.*'}] }}"
  with_items:
    - "{{ RABBITMQ_VHOSTS }}"
  tags:
    - users
    - maintenance
    - "manage"
    - "manage:app-users"

- name: Add admin users
  rabbitmq_user:
    user: "{{ item.name }}"
    password: "{{ item.password }}"
    tags: "administrator"
    state: "{{ item.state | default('present') }}"
    permissions: "{{ permissions }}"
  with_items:
    - "{{rabbitmq_auth_config.admins}}"
  when: "'admins' in rabbitmq_auth_config"
  tags:
    - users
    - maintenance
    - "manage"
    - "manage:app-users"

- name: Make queues mirrored
  rabbitmq_policy:
    name: HA
    pattern: .*
    vhost: "{{ item }}"
  args:
    tags:
      ha-mode: all
      ha-sync-mode: automatic
  with_items: "{{ RABBITMQ_VHOSTS }}"
  when: RABBITMQ_CLUSTERED_HOSTS|length > 1
  tags:
    - ha
    - maintenance
    - "install"
    - "install:app-configuration"

#
# Depends upon the management plugin
#
- name: Install admin tools
  get_url:
    url: "http://localhost:{{ rabbitmq_management_port }}/cli/rabbitmqadmin"
    dest: "/usr/local/bin/rabbitmqadmin"
  tags:
    - "install"
    - "install:app-configuration"

- name: Ensure rabbitmqadmin attributes
  file:
    path: "/usr/local/bin/rabbitmqadmin"
    owner: root
    group: root
    mode: "0655"
  tags:
    - "install"
    - "install:app-configuration"

- name: Set cluster name
  command: "/usr/sbin/rabbitmqctl set_cluster_name  {{ RABBITMQ_CLUSTER_NAME }}"
  tags:
    - "install"
    - "install:app-configuration"
