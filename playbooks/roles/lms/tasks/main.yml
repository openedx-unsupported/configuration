# requires:
#  - group_vars/all
#  - common/tasks/main.yml
#  - nginx/tasks/main.yml
---
- name: create lms application config
  template: src=env.json.j2 dest=$app_base_dir/lms.env.json mode=640 owner=www-data group=adm
  tags:
  - lms
  - lms-env
  - update

- name: create lms auth file
  template: src=auth.json.j2 dest=$app_base_dir/lms.auth.json mode=640 owner=www-data group=adm
  tags:
  - lms
  - lms-env
  - update

- include: ../../nginx/tasks/nginx_site.yml state=link site_name=lms
- include: ../../nginx/tasks/nginx_site.yml state=link site_name=lms-backend

- name: Change permissions on datadir
  file: path={{ app_base_dir }}/data state=directory owner=www-data group=www-data
  tags:
  - cms
  - lms
  - lms-env
  - update

- name: Create lms log target directory
  file: path={{log_base_dir}}/lms state=directory owner=syslog group=adm mode=2770
  tags:
  - lms
  - lms-env
  - logging
  - update

# If we set up LMS, we have to set up edx logging
- include: ../../common/tasks/edx_logging_base.yml

# Install ssh keys for ubuntu account to be able to check out from edx-platform
# Temprory behavior, not needed after June 1. Perhaps still useful as a recipe.
# {{ secure_dir }} is relative to the top-level playbooks dir so there is some
# ugly relative pathing here

- name: install read-only ssh key for edx-platform repo (private)
  copy: src=../../../{{ secure_dir }}/files/git-identity dest=/etc/git-identity force=yes owner=ubuntu group=adm mode=600
  tags:
  - lms
  - cms
  - update

- name: upload ssh script
  copy: src=git_ssh.sh dest=/tmp/git_ssh.sh force=yes owner=root group=adm mode=750
  tags:
  - lms
  - cms
  - update

# Check out edx-platform repo to $app_base_dir
- name: install git and its recommends
  apt: pkg=git state=present install_recommends=yes 
  tags:
  - lms
  - cms

- name: git checkout edx-platform repo into app_base_dir
  git: dest=$lms_code_dir repo=$lms_source_repo
  environment:
    GIT_SSH: /tmp/git_ssh.sh
  tags:
  - lms
  - cms
  - install

## Install the debian package requirements system-wide
- name: store remote apt_repos list for ansible use
  command: cat {{lms_code_dir}}/apt-repos.txt
  register: apt_repos_list
  tags:
  - lms
  - cms
  - install

- name: add apt_repos to the remote hosts
  apt_repository: repo="$item"
  with_items: "{{apt_repos_list.stdout.split()}}"
  register: apt_repos_list_repo_adds
  sudo: True
  tags:
  - lms
  - cms
  - install

- name: update apt cache (if necessary)
  apt: update_cache=yes
  sudo: True
  only_if: "{{apt_repos_list_repo_adds.changed}}"
  tags:
  - lms
  - cms
  - install

- name: store remote apt_packages list for ansible use
  command: cat {{lms_code_dir}}/apt-packages.txt
  register: apt_packages_list
  tags:
  - lms
  - cms
  - install

- name: install a bunch of system packages on which LMS and CMS rely
  apt: pkg={{item}} state=present
  with_items: lms_debian_pkgs
  tags:
  - lms
  - cms
  - install

# Install the python requirements into $venv_dir 
- name : install python pre-requirements
  pip: requirements="{{lms_code_dir}}/pre-requirements.txt" virtualenv="{{venv_dir}}" state=present
  tags:
  - lms
  - cms
  - install

# Install the python modules into $venv_dir 
- name : install python packages using the shell
  #pip: requirements="{{lms_code_dir}}/requirements.txt" virtualenv="{{venv_dir}}" 
  # Need to use shell rather than pip so that we can maintain the context of our current working directory; some 
  # requirements are pathed relative to the edx-platform repo. Using the pip from inside the virtual environment implicitly
  # installs everything into that virtual environment.
  shell: cd {{lms_code_dir}} && {{venv_dir}}/bin/pip install --exists-action w -r {{lms_code_dir}}/requirements.txt
  tags:
  - lms
  - cms
  - install
  - pip 
# Creates LMS upstart file
- include: ../../gunicorn/tasks/upstart.yml service_variant=lms
