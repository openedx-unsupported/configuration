
# Override these variables
# to change the base directory
# where edX is installed

# Set global htpasswd credentials
COMMON_ENABLE_BASIC_AUTH: False
COMMON_HTPASSWD_USER: edx
COMMON_HTPASSWD_PASS: edx
COMMON_BASIC_AUTH_EXCEPTIONS:
  - 192.168.0.0/16
  - 172.16.0.0/12

# Settings to use for calls to edxapp manage.py
COMMON_EDXAPP_SETTINGS: 'production'

# Turn on syncing logs on rotation for edx
# application and tracking logs, must also
# have the aws or openstack role installed
COMMON_OBJECT_STORE_LOG_SYNC: False
COMMON_OBJECT_STORE_LOG_SYNC_BUCKET: "edx-{{ COMMON_ENVIRONMENT }}-{{ COMMON_DEPLOYMENT }}"
COMMON_OBJECT_STORE_LOG_SYNC_PREFIX: "logs/tracking/"
COMMON_OBJECT_STORE_LOG_SYNC_SCRIPT: "{{ COMMON_BIN_DIR }}/send-logs-to-object-store"
COMMON_OBJECT_STORE_LOG_SYNC_ON_EXIT: "{{ COMMON_BIN_DIR }}/sync-logs-on-exit"

COMMON_BASE_DIR: /edx
COMMON_DATA_DIR: "{{ COMMON_BASE_DIR}}/var"
COMMON_APP_DIR: "{{ COMMON_BASE_DIR}}/app"
COMMON_LOG_DIR: "{{ COMMON_DATA_DIR }}/log"
# Override this to create
# common users in all roles
COMMON_USER_INFO: []
# these directories contain
# symlinks for convenience
COMMON_BIN_DIR: "{{ COMMON_BASE_DIR }}/bin"
COMMON_CFG_DIR: "{{ COMMON_BASE_DIR }}/etc"

common_directories:
  - path: "{{ COMMON_DATA_DIR }}"
  - path: "{{ COMMON_APP_DIR }}"
  - path: "{{ COMMON_BIN_DIR }}"
  - path: "{{ COMMON_CFG_DIR }}"
  - path: "{{ COMMON_LOG_DIR }}"
    owner: "{{ common_log_user }}"
    group: "{{ common_log_user }}"
  - path: "/etc/logrotate.d/hourly"
  - path: "/etc/rsyslog.d/50-default.conf"
    state: absent

COMMON_ENVIRONMENT: 'default_env'
COMMON_DEPLOYMENT: 'default_deployment'
COMMON_PIP_VERBOSITY: ''
COMMON_PYPI_MIRROR_URL: 'https://pypi.python.org/simple'
COMMON_NPM_MIRROR_URL: 'https://registry.npmjs.org'
COMMON_UBUNTU_APT_KEYSERVER: "http://keyserver.ubuntu.com/pks/lookup?op=get&fingerprint=on&search="

common_digicert_name: "DigiCertSHA2SecureServerCA.crt"
common_digicert_base_url: "https://cacerts.digicert.com/"

COMMON_EDX_PPA: "deb http://ppa.edx.org {{ ansible_distribution_release }} main"
COMMON_EDX_PPA_KEY_SERVER: "keyserver.ubuntu.com"
COMMON_EDX_PPA_KEY_ID: "69464050"

#The git checkout url in most roles is constructed from these values
#e.g. https://{{COMMON_GIT_MIRROR}}/{{COMMON_GIT_PATH}}/repo.git
COMMON_GIT_PROTOCOL: 'https'  # https|ssh
COMMON_GIT_MIRROR: 'github.com' # git server hostname
COMMON_GIT_PATH: 'edx'  # git path prefix

# override this var to set a different hostname
COMMON_HOSTNAME: ""
COMMON_DEPLOY_HOSTNAME: ""

# Set to true to customize DNS search domains
COMMON_CUSTOM_DHCLIENT_CONFIG: false
# uncomment and specifity your domains.
# COMMON_DHCLIENT_DNS_SEARCH: ["ec2.internal","example.com"]

COMMON_SSH_PASSWORD_AUTH: "no"

COMMON_SECURITY_UPDATES: no
# These are three maintenance accounts across all databases
# the read only user is is granted select privs on all dbs
# the admin user is granted create user privs on all dbs
# the migrate user is granted table alter privs on all dbs

COMMON_MYSQL_READ_ONLY_USER: 'read_only'
COMMON_MYSQL_READ_ONLY_PASS: 'password'
COMMON_ANALYTICS_MYSQL_READ_ONLY_USER: 'read_only'
COMMON_ANALYTICS_MYSQL_READ_ONLY_PASS: 'password'
COMMON_MYSQL_ADMIN_USER: 'admin'
COMMON_MYSQL_ADMIN_PASS: 'password'
COMMON_MYSQL_MIGRATE_USER: 'migrate'
COMMON_MYSQL_MIGRATE_PASS: 'password'

COMMON_MONGO_READ_ONLY_USER: 'read_only'
COMMON_MONGO_READ_ONLY_PASS: !!null
COMMON_ENABLE_DATADOG: False
COMMON_ENABLE_NGINXTRA: False
COMMON_ENABLE_SPLUNKFORWARDER: False
COMMON_ENABLE_NEWRELIC: False
COMMON_ENABLE_NEWRELIC_INFRASTRUCTURE: False
# enables app reporting, you must enable newrelic
# as well
COMMON_ENABLE_NEWRELIC_APP: False
COMMON_ENABLE_MINOS: False
COMMON_TAG_EC2_INSTANCE: False
COMMON_BOTO_VERSION: '2.48.0'
COMMON_NODE_VERSION: '12.13.0'
common_redhat_pkgs:
  - ntp
  - lynx
  - logrotate
  - rsyslog
  - git
  - unzip
  - acl

common_debian_pkgs_default:
  - apt-transport-https
  - ntp
  - acl
  - iotop
  - lynx
  - logrotate
  - rsyslog
  - git
  - unzip
  - net-tools
  - python3-pip

common_release_specific_debian_pkgs:
  xenial:
    - python-pip
    - python2.7-dev
  bionic:
    - python-pip
    - python3.5-dev
  focal:
    - python3.5-dev

common_debian_pkgs: "{{ common_debian_pkgs_default + common_release_specific_debian_pkgs[ansible_distribution_release] }}"

common_debian_devstack_pkgs:
  - watchman

# Packages that should be installed from our custom PPA, i.e. COMMON_EDX_PPA
old_python_debian_pkgs:
  - "python2.7=2.7.10-0+{{ ansible_distribution_release }}1"


COMMON_PIP_VERSION: '20.0.2'

common_pip_pkgs:
  - pip=={{ COMMON_PIP_VERSION }}
  - setuptools==44.1.0
  - virtualenv==16.7.10
  - boto3

common_web_user: www-data
common_web_group: www-data
common_log_user: syslog

common_git_ppa: "ppa:git-core/ppa"

# Skip supervisor tasks
# When set to true this flag will allow you to install everything but keep
# supervisor from starting any of the services.
# Service files will be placed in supervisor's conf.available.d but not linked
# to supervisors 'conf.d' directory.
disable_edx_services: False

# Some apps run differently in dev mode(forums)
# so different start scripts are generated in dev mode.
devstack: False

# Some cluster apps need special settings when in vagrant
# due to eth0 always being the same IP address
vagrant_cluster: False

common_debian_variants:
  - Ubuntu
  - Debian

# We only have to install old Python for these releases:
old_python_ppa_releases:
  - trusty

common_redhat_variants:
  - CentOS
  - Red Hat Enterprise Linux
  - Amazon

# Gunicorn pre_request function to log request before it is processed further.
common_pre_request: |
    def pre_request(worker, req):
        worker.log.info("%s %s" % (req.method, req.path))

# Code used in gunicorn post_fork functions to be sure we aren't sharing cache
# connections among forked children.
common_close_all_caches: |
    def close_all_caches():
        # Close the cache so that newly forked workers cannot accidentally share
        # the socket with the processes they were forked from. This prevents a race
        # condition in which one worker could get a cache response intended for
        # another worker.
        # We do this in a way that is safe for 1.4 and 1.8 while we still have some
        # 1.4 installations.
        from django.conf import settings
        from django.core import cache as django_cache
        if hasattr(django_cache, 'caches'):
            get_cache = django_cache.caches.__getitem__
        else:
            get_cache = django_cache.get_cache
        for cache_name in settings.CACHES:
            cache = get_cache(cache_name)
            if hasattr(cache, 'close'):
                cache.close()

        # The 1.4 global default cache object needs to be closed also: 1.4
        # doesn't ensure you get the same object when requesting the same
        # cache. The global default is a separate Python object from the cache
        # you get with get_cache("default"), so it will have its own connection
        # that needs to be closed.
        cache = django_cache.cache
        if hasattr(cache, 'close'):
            cache.close()

COMMON_TRACKING_LOG_ROTATION:
  - size 1M

# If you include configuration from multiple sources and want to ensure that
# all sources are included when running playbooks, this provides a way to check that.
# As an example, if you have a secure configuration repo, you can do
# COMMON_EXTRA_CONFIGURATION_SOURCES_CHECKING: true
# COMMON_EXTRA_CONFIGURATION_SOURCES:
#  - COMMON_USING_SECURE_REPO
# The common role will then ensure that COMMON_USING_SECURE_REPO is defined and true.
# This will ensure that you've included a file that sets
# COMMON_USING_SECURE_REPO: true
COMMON_EXTRA_CONFIGURATION_SOURCES_CHECKING: false
COMMON_EXTRA_CONFIGURATION_SOURCES: []

COMMON_LMS_BASE_URL: 'http://127.0.0.1:8000'
COMMON_OAUTH_BASE_URL: '{{ COMMON_LMS_BASE_URL }}'
COMMON_OAUTH_PUBLIC_URL_ROOT: '{{ COMMON_OAUTH_BASE_URL }}/oauth2'
COMMON_OAUTH_URL_ROOT: '{{ COMMON_OAUTH_PUBLIC_URL_ROOT }}'
COMMON_OAUTH_LOGOUT_URL: '{{ COMMON_OAUTH_BASE_URL }}/logout'

############
# Settings related to JSON Web Tokens (JWTs).
# See https://github.com/edx/edx-platform/blob/master/openedx/core/djangoapps/oauth_dispatch/docs/decisions/0003-use-jwt-as-oauth-tokens-remove-openid-connect.rst
COMMON_JWT_AUDIENCE: 'SET-ME-PLEASE'
COMMON_JWT_ISSUER: '{{ COMMON_OAUTH_URL_ROOT }}'

# The following should be the string representation of a JSON Web Key Set (JWK set)
# containing active public keys for signing JWTs.
# See https://github.com/edx/edx-platform/blob/master/openedx/core/djangoapps/oauth_dispatch/docs/decisions/0008-use-asymmetric-jwts.rst
COMMON_JWT_PUBLIC_SIGNING_JWK_SET: ''

COMMON_JWT_AUTH_COOKIE_HEADER_PAYLOAD: 'edx-jwt-cookie-header-payload'
COMMON_JWT_AUTH_COOKIE_SIGNATURE: 'edx-jwt-cookie-signature'
COMMON_JWT_AUTH_REFRESH_COOKIE: 'edx-jwt-refresh-cookie'

# To be deprecated, in favor of the above COMMON_JWT_PUBLIC_SIGNING_JWK_SET.
COMMON_JWT_SECRET_KEY: 'SET-ME-PLEASE'
############

# Set worker user default
CREATE_SERVICE_WORKER_USERS: True

COMMON_ENABLE_AWS_ROLE: true

# Remote config
COMMON_HERMES_ENABLED: false

COMMON_DECRYPT_CONFIG_ENABLED: false
COMMON_COPY_CONFIG_ENABLED: false

# Disable logging of config rendering which has secrets
COMMON_CONFIG_NO_LOGGING: True

# Default sandbox build flag to false
SANDBOX_CONFIG: False

# Should we create the JWT settings?
CONFIGURE_JWTS: false

# Variable to control setting up the retirement services
COMMON_RETIREMENT_SERVICE_SETUP: false

# How to log in as "lms" to xqueue.
COMMON_XQUEUE_LMS_PASSWORD: password
