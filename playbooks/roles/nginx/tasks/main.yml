# requires:
#   - common/tasks/main.yml
---

- name: create nginx app dirs
  file: >
    path="{{ item }}"
    state=directory
    owner="{{ nginx_user }}"
    group="{{ common_web_group }}"
  with_items:
    - "{{ nginx_app_dir }}"
    - "{{ nginx_sites_available_dir }}"
    - "{{ nginx_sites_enabled_dir }}"
  notify: restart nginx

- name: create nginx data dirs
  file: >
    path="{{ item }}"
    state=directory
    owner="{{ common_web_user }}"
    group="{{ nginx_user }}"
  with_items:
    - "{{ nginx_data_dir }}"
    - "{{ nginx_log_dir }}"
  notify: restart nginx

- name: Install nginx packages
  apt: pkg={{','.join(nginx_debian_pkgs)}} state=present
  notify: restart nginx

- name: Server configuration file
  template: >
    src=nginx.conf.j2 dest=/etc/nginx/nginx.conf
    owner=root group={{ common_web_user }} mode=0644
  notify: reload nginx

- name: Creating common nginx configuration
  template: >
    src=edx-release.j2 dest={{ nginx_sites_available_dir }}/edx-release
    owner=root group=root mode=0600
  notify: reload nginx

- name: Creating link for common nginx configuration
  file: >
    src={{ nginx_sites_available_dir }}/edx-release
    dest={{ nginx_sites_enabled_dir }}/edx-release
    state=link owner=root group=root
  notify: reload nginx

- name: Copying nginx configs for {{ nginx_sites }}
  template: >
    src={{ item }}.j2 dest={{ nginx_sites_available_dir }}/{{ item }}
    owner=root group={{ common_web_user }} mode=0640
  notify: reload nginx
  with_items: nginx_sites

- name: Creating nginx config links for {{ nginx_sites }}
  file: >
    src={{ nginx_sites_available_dir }}/{{ item  }}
    dest={{ nginx_sites_enabled_dir }}/{{ item }}
    state=link owner=root group=root
  notify: reload nginx
  with_items: nginx_sites

- name: Write out htpasswd file
  htpasswd: >
    name={{ NGINX_HTPASSWD_USER }}
    password={{ NGINX_HTPASSWD_PASS }}
    path={{ nginx_htpasswd_file }}
  when: NGINX_HTPASSWD_USER and NGINX_HTPASSWD_PASS

- name: Create nginx log file location (just in case)
  file: >
    path={{ nginx_log_dir}} state=directory
    owner={{ common_web_user }} group={{ common_web_user }}

# Check to see if the ssl cert/key exists before copying.
# This extra check is done to prevent failures when
# ansible-playbook is run locally
- local_action:
    module: stat
    path: "{{ NGINX_SSL_CERTIFICATE }}"
  register: ssl_cert

- local_action:
    module: stat
    path: "{{ NGINX_SSL_KEY }}"
  register: ssl_key

- name: copy ssl cert
  copy: >
    src={{ NGINX_SSL_CERTIFICATE }}
    dest=/etc/ssl/certs/
    owner=root group=root mode=0644
  when: ssl_cert.stat.exists and NGINX_ENABLE_SSL and NGINX_SSL_CERTIFICATE != 'ssl-cert-snakeoil.pem'

- name: copy ssl key
  copy: >
    src={{ NGINX_SSL_KEY }}
    dest=/etc/ssl/private/
    owner=root group=root mode=0640
  when: ssl_key.stat.exists and NGINX_ENABLE_SSL and NGINX_SSL_KEY != 'ssl-cert-snakeoil.key'

# removing default link
- name: Removing default nginx config and restart (enabled)
  file: path={{ nginx_sites_enabled_dir }}/default state=absent
  notify: reload nginx

# Note that nginx logs to /var/log until it reads its configuration, so /etc/logrotate.d/nginx is still good

- name: Set up nginx access log rotation
  template: >
    dest=/etc/logrotate.d/nginx-access src=edx_logrotate_nginx_access.j2
    owner=root group=root mode=644

# removing default link
- name: Removing default nginx config and restart (enabled)
  file: path={{ nginx_sites_enabled_dir }}/default state=absent
  notify: reload nginx

# Note that nginx logs to /var/log until it reads its configuration, so /etc/logrotate.d/nginx is still good

- name: Set up nginx access log rotation
  template: >
    dest=/etc/logrotate.d/nginx-access src=edx_logrotate_nginx_access.j2
    owner=root group=root mode=644

- name: Set up nginx access log rotation
  template: >
    dest=/etc/logrotate.d/nginx-error src=edx_logrotate_nginx_error.j2
    owner=root group=root mode=644

# If tasks that notify restart nginx don't change the state of the remote system
# their corresponding notifications don't get run.  If nginx has been stopped for
# any reason, this will ensure that it is started up again.
- name: make sure nginx has started
  service: name=nginx state=started
