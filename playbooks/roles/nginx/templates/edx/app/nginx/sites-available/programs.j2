#
# {{ ansible_managed }}
#


{% if "programs" in nginx_default_sites %}
  {% set default_site = "default" %}
{% else %}
  {% set default_site = "" %}
{% endif %}

upstream programs_app_server {
{% for host in nginx_programs_gunicorn_hosts %}
    server {{ host }}:{{ programs_gunicorn_port }} fail_timeout=0;
{% endfor %}
}

server {
  server_name {{ PROGRAMS_HOSTNAME }};

  {% if NGINX_ENABLE_SSL %}

  listen {{ PROGRAMS_NGINX_PORT }} {{ default_site }};
  listen {{ PROGRAMS_SSL_NGINX_PORT }} ssl;

  ssl_certificate /etc/ssl/certs/{{ NGINX_SSL_CERTIFICATE|basename }};
  ssl_certificate_key /etc/ssl/private/{{ NGINX_SSL_KEY|basename }};
  # Request that the browser use SSL for all connections.
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

  {% else %}
  listen {{ PROGRAMS_NGINX_PORT }} {{ default_site }};
  {% endif %}

  location ~ ^/static/(?P<file>.*) {
    root {{ COMMON_DATA_DIR }}/{{ programs_service_name }};
    try_files /staticfiles/$file =404;

    # Request that the browser use SSL for these connections. Repeated here
    # because add_header directives are only inherited from the previous level
    # if there are no add_header directives defined on the current level.
    # See: http://nginx.org/en/docs/http/ngx_http_headers_module.html#add_header.
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
    
    # Instruct the browser to cache static assets for one hour.
    add_header Cache-Control "public; max-age=3600";
  }

  location / {
    try_files $uri @proxy_to_app;
  }

  {% include "robots.j2" %}

location @proxy_to_app {
    proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
    proxy_set_header X-Forwarded-Port $http_x_forwarded_port;
    proxy_set_header X-Forwarded-For $http_x_forwarded_for;
    proxy_set_header Host $http_host;

    proxy_redirect off;
    proxy_pass http://programs_app_server;
  }
{% if NGINX_SET_X_FORWARDED_HEADERS %}
   if ($scheme != "https") {
    rewrite ^ https://$host$uri permanent;
   }
 {% else %}
  # Forward to HTTPS if we're an HTTP request...
  if ($http_x_forwarded_proto = "http") {
    set $do_redirect "true";
  }

  # Run our actual redirect...
  if ($do_redirect = "true") {
    rewrite ^ https://$host$request_uri? permanent;
  }
 {% endif %}
}
