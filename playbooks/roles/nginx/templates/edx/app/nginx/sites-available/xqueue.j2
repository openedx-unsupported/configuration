upstream xqueue_app_server {
    {% for host in nginx_xqueue_gunicorn_hosts %}
        server {{ host }}:{{ xqueue_gunicorn_port }} fail_timeout=0;
    {% endfor %}
}

server {
  listen {{ XQUEUE_NGINX_PORT }} default_server;
  {% if NGINX_ENABLE_IPV6 %}
  listen [::]:{{ XQUEUE_NGINX_PORT }} default_server;
  {% endif %}

  {% if NGINX_ENABLE_SSL %}
  listen {{ XQUEUE_NGINX_SSL_PORT }} ssl;
  {% if NGINX_ENABLE_IPV6 %}
  listen [::]:{{ XQUEUE_NGINX_SSL_PORT }} ssl;
  {% endif %}

  {% include "common-settings.j2" %}

  access_log {{ nginx_log_dir }}/access.log {{ NGINX_LOG_FORMAT_NAME }};
  error_log {{ nginx_log_dir }}/error.log error;
  
  ssl_certificate /etc/ssl/certs/{{ NGINX_SSL_CERTIFICATE|basename }};
  ssl_certificate_key /etc/ssl/private/{{ NGINX_SSL_KEY|basename }};
  {% endif %}

  {% if NGINX_ENABLE_SSL or NGINX_REDIRECT_TO_HTTPS %}
  # request the browser to use SSL for all connections
  add_header Strict-Transport-Security "max-age={{ NGINX_HSTS_MAX_AGE }}";
  {% endif %}

  # set xqueue upload limit to 20MB to match the LMS upload limit.
  client_max_body_size 20M;

  {% include "handle-tls-redirect-and-ip-disclosure.j2" %}

  location / {
    {% if XQUEUE_ENABLE_BASIC_AUTH|bool %}
      {% include "basic-auth.j2" %}
    {% endif %}
    try_files $uri @proxy_to_app;
  }

  # No basic auth security on the heartbeat url, so that ELB can use it
  location /xqueue/status/{
    try_files $uri @proxy_to_app;
  }

  {% include "robots.j2" %}

location @proxy_to_app {
    proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
    proxy_set_header X-Forwarded-Port $http_x_forwarded_port;
    proxy_set_header X-Forwarded-For $http_x_forwarded_for;

    # newrelic-specific header records the time when nginx handles a request.
    proxy_set_header X-Queue-Start "t=${msec}";

    proxy_set_header Host $http_host;

    proxy_redirect off;
    proxy_pass http://xqueue_app_server;
  }
}

