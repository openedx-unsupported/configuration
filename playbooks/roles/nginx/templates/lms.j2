server {
  # LMS configuration file for nginx, templated by ansible

  listen 80;

  server_name *.edx.org;
  access_log {{log_base_dir}}/nginx/access.log;
  error_log {{log_base_dir}}/nginx/error.log error;

  #
  # Send error response when request host isn't under our control
  # We will no longer respond to proxy attempts like this with
  # anything.
  # curl -i -A '' -x http://www.edx.org:80 --proxy-negotiate -U u:p -u u:p http://chat.sdtz.com
  #

  set $reject 'no';

  if ($host !~* (edx.org|edxonline.org)$ ) {
    set $reject 'yes';
  }

  if ($request_uri ~ ^(/heartbeat)$) {
    set $reject 'no';
  }

  if ( $reject = 'yes' ) {
    return 444;
  }
  # CS184 requires uploads of up to 4MB for submitting screenshots.
  # CMS requires larger value for course assest, values provided
  # via hiera.
  client_max_body_size 4M;

  rewrite ^(.*)/favicon.ico$ /static/images/favicon.ico last;

  # CS188 rewrite rule for Arjun 9/19/12
  rewrite ^/ai$ http://$host/courses/BerkeleyX/CS188.1x/2012_Fall/about last;

  # redirect /ai to the about page for CS188.1x
  rewrite ^/ai$ https://$host/courses/BerkeleyX/CS188.1x/2012_Fall/about last;

  location @proxy_to_lms_app {
    proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
    proxy_set_header X-Forwarded-Port $http_x_forwarded_port;
    proxy_set_header X-Forwarded-For $http_x_forwarded_for;
    proxy_set_header Host $http_host;

    proxy_redirect off;
    proxy_pass http://lms-backend;
  }

  location / {
    try_files $uri @proxy_to_lms_app;
  }

  # No basic auth security on the github_service_hook url, so that github can use it for cms
  location /github_service_hook {
    try_files $uri @proxy_to_lms_app;
  }

  # No basic auth security on the heartbeat url, so that ELB can use it
  location /heartbeat {
    try_files $uri @proxy_to_lms_app;
  }

  # Check security on this
  location ~ /static/(?P<file>.*) {
    auth_basic            "Restricted";
    auth_basic_user_file  /etc/nginx/lms.htpasswd;
    root {{app_base_dir}};
    try_files /staticfiles/$file /course_static/$file =404;

    # return a 403 for static files that shouldn't be
    # in the staticfiles directory
    location ~ ^/static/(?:.*)(?:\.xml|\.json|README.TXT) {
        return 403;
    }
    # Set django-pipelined files to maximum cache time
    location ~ "/static/(?P<collected>.*\.[0-9a-f]{12}\..*)" {
        expires max;
        # Without this try_files, files that have been run through
        # django-pipeline return 404s
        try_files /staticfiles/$collected /course_static/$collected =404;
    }

    # Expire other static files immediately (there should be very few / none of these)
    expires epoch;
  }

  # Forward to HTTPS if we're an HTTP request...
  if ($http_x_forwarded_proto = "http") {
    set $do_redirect "true";
  }

  # Run our actual redirect...
  if ($do_redirect = "true") {
    rewrite ^ https://$host$request_uri? permanent;
  }

  # Monitoring support for datadog.
  location /nginx_status {
    stub_status on;
    access_log off;
    allow 127.0.0.1/32;
    deny all;
  }
}
