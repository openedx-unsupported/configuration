---
#
# edX Configuration
#
# github:     https://github.com/edx/configuration
# wiki:       https://openedx.atlassian.net/wiki/display/OpenOPS
# code style: https://openedx.atlassian.net/wiki/display/OpenOPS/Ansible+Code+Conventions
# license:    https://github.com/edx/configuration/blob/master/LICENSE.TXT
#
#
#
# Tasks for role lets_encrypt
# 
# Overview:
# 
# Automatically install SSL certificates for a list of domains
# using the Let's Encrypt service. Certificates are automatically
# installed in nginx and a renewal check is scheduled to run 
# twice daily, to check for expiry/revocation. Updated certificates
# are automatically installed where required.
#
# This uses the certbot-auto script pulling from the current master 
# branch at github.com/certbot/certbot.
#
# There is currently no plugin for nginx, so this implementation
# uses the webroot method for ACME authorisation. This works
# by placing a secret file under ./well-known/ in the web root.
# This path is served direct from the nginx web root folder
# (see nginx configuration).
#
# The nginx service must be running for this to work. For best results
# install nginx with NGINX_SSLNGINX_SSL=true. This will start the server
# using a self-signed insecure certificate which this play will replace. 
#
# Downloaded certificates/keys are symlinked to /etc/ssl/certs and 
# /etc/ssl/private respectively and the nginx configuration 
# /etc/nginx/ssl-certs.conf is rewritten to point to the correct files.
#
# Multiple domains will receive a single shared certificate.
#
# Finally, the nginx service is restarted to load the new certificates.
#
# Dependencies:
#
# * nginx (running; SSL enabled for auto-certificate install)
# * git
# 
# Example play:
#
# ansible-playbook ./run_role.yml -i '<ip-addr>,' -e '{"role":"lets_encrypt","LETS_ENCRYPT_DOMAINS":["www1.example.org","www2.example.org"]}'

- name: check domains
  fail:
    msg: "Domain list is empty"
  when: LETS_ENCRYPT_DOMAINS|length < 1
  tags:
    - install
    - update

- name: check email
  fail:
    msg: "Email address was not provided"
  when: LETS_ENCRYPT_EMAIL == None
  tags:
    - install
    - update

- name: install certbot
  git:
    repo: https://github.com/certbot/certbot
    dest: /opt/letsencrypt/certbot
  tags:
   - install

- name: create .well-known directory
  file:
    path: /usr/share/nginx/www/.well-known
    state: directory
    owner: www-data
    group: www-data
  tags:
    - install
    - update
    
- name: render certbot script
  template:
    src: run_certbot.sh.j2
    dest: /opt/letsencrypt/run_certbot.sh
    mode: u+x
  tags:
    - install
    - update

- name: render nginx cert configuration file
  template:
    src: ssl-certs.conf.j2
    dest: /opt/letsencrypt/ssl-certs.conf
    owner: root
  tags:
    - install

- name: run certbot
  command: /opt/letsencrypt/run_certbot.sh
  tags:
    - install
    - update
  ignore_errors: true

# Renewal will auto-update the certs in place at the linked-to locations
# checks twice daily @ 12hr interval Â±60mins
- name: calculate random hour for cron
  set_fact:
    le_cron_hour: "{{ 12|random }}"
  tags:
    - install
    - install:cron

# Setup renewal cron, either using either the specified time
# or a random 12 hour interval if no time is given
- name: create cronjob to check certificate renewal 2x daily
  cron: 
        name      : "Renew Let's Encrypt certificates via certbot"
        hour      : "{{ le_cron_hour }},{{ le_cron_hour|int+12 }}"
        minute    : "{{ 59|random }}"
        cron_file : "lets-encrypt-renew"
        user      : "root"
        job       : /opt/letsencrypt/run_certbot.sh
        state     : present
  tags:
    - install
    - install:cron
  when: not (LETS_ENCRYPT_CRON_TASK_HOUR or LETS_ENCRYPT_CRON_TASK_DAY or LETS_ENCRYPT_CRON_TASK_MINUTE)

- name: create cronjob to check certificate at specified time
  cron:
        name      : "Renew Let's Encrypt certificates via certbot"
        day       : "{{ LETS_ENCRYPT_CRON_TASK_HOUR or '*' }}"
        hour      : "{{ LETS_ENCRYPT_CRON_TASK_DAY or '*'}}"
        minute    : "{{ LETS_ENCRYPT_CRON_TASK_MINUTE or '*' }}"
        cron_file : "lets-encrypt-renew"
        user      : "root"
        job       : /opt/letsencrypt/run_certbot.sh
        state     : present
  tags:
    - install
    - install:cron
  when: LETS_ENCRYPT_CRON_TASK_HOUR or LETS_ENCRYPT_CRON_TASK_DAY or LETS_ENCRYPT_CRON_TASK_MINUTE


