---

# edX Configuration
#
# github:     https://github.com/edx/configuration
# wiki:       https://openedx.atlassian.net/wiki/display/OpenOPS
# code style: https://openedx.atlassian.net/wiki/display/OpenOPS/Ansible+Code+Conventions
# license:    https://github.com/edx/configuration/blob/master/LICENSE.TXT
#
# Tasks for role user
#
# Overview:
#
# This role is included as a dependency by other roles or as a standalone
# paramaterized role to create users.
#
# There are generally three classes of users:
# (1) normal login users without any special permissions
# (2) admin users with full sudo permissions
# (3) restricted users that use rbash and are locked down to specific sudo commands
#
# The parameter "type" sets the user in one of these three categories:
#   (1) type not set
#   (2) type=admin
#   (3) type=restricted
#
# Dependencies:
#
# This role has no dependencies but requires parameters
#
# Example:
#
#   # Create a few users, one restricted
#   # one admin with a github key and one with
#   # a regular key.
#   #
#   # All user types can use a key from github
#   # and also have additional authorized keys defined
#   #
#
#   - role: user
#     user_info:
#       # This restricted user is defined in meta/
#       # for edxapp, it creates a user that can only
#       # run manage.py commands
#       - name: automator
#         type: restricted
#         state: present
#         # The sudoers file is optional.
#         sudoers_template: '99-edxapp-manage-cmds.j2'
#         authorized_keys:
#         - ssh-rsa abcdef...
#         - ssh-rsa ghiklm...
#
#       # More users passed to the role, this one is a user
#       # with full sudo, key fetched from github
#       - name: frank
#         github: true
#         type: admin
#         state: present
#
#       # This user is a normal login user without sudo, with
#       # a couple keys passed in as parameters
#       - name: sally
#         authorized_keys:
#         - ssh-rsa abcdef...
#         - ssh-rsa ghiklm...
#
# By default for restricted users we only allow sudo, if you
# want to provide more binaries add them to user_rbash_links
# which can be passed in as a parameter to the role.
#
- debug: 
    var: user_info

- name: Create the edxadmin group
  group: 
    name: edxadmin 
    state: present

# some AMIs (such as EMR master nodes) don't read the config files out of /etc/sudoers.d by default
- name: Ensure sudoers.d is read
  lineinfile:
    dest: /etc/sudoers 
    state: present
    regexp: '^#includedir /etc/sudoers.d' 
    line: '#includedir /etc/sudoers.d'
    validate: 'visudo -cf %s'

# give full sudo admin access to the edxadmin group
- name: Grant full sudo access to the edxadmin group
  copy: 
    content: "%edxadmin ALL=(ALL) NOPASSWD:ALL"
    dest: /etc/sudoers.d/edxadmin 
    owner: root 
    group: root
    mode: 0440 
    validate: 'visudo -cf %s'

- name: Create the users
  user:
    name: "{{ item.name }}"
    shell: /bin/bash
    remove: yes
    state: "{{ item.state | default('present') }}"
  with_items: "{{ user_info }}"

- name: Assign admin role to admin users
  user:
    name: "{{ item.name }}"
    groups: edxadmin
  when: item.type is defined and item.type == 'admin' and item.get('state', 'present') == 'present'
  with_items: "{{ user_info }}"

- name: Check the ssh key(s) for user(s) over github
  uri:
    url: "https://github.com/{{ item.name }}.keys"
    return_content: true
  # We don't care if absent users lack ssh keys
  when: item.get('state', 'present') == 'present' and item.github is defined
  with_items: "{{ user_info }}"
  register: github_users_return
  until: github_users_return is succeeded
  retries: 5

- name: Print warning if github user(s) missing ssh key
  debug:
    msg: "User {{ item.item.name }} doesn't have an SSH key associated with their github account"
  with_items: "{{ github_users_return.results | default([]) }}"
  # We skip users in the previous task, and they end up with no content_length
  when: ('content' in item and item.content == "")

- name: Halt if USER_FAIL_MISSING_KEYS is true and github user(s) missing ssh key
  fail:
    msg: "User {{ item.item.name }} doesn't have an SSH key associated with their github account"
  with_items: "{{ github_users_return.results | default([]) }}"
  # We skip users in the previous task, and they end up with no content_length
  when: (USER_FAIL_MISSING_KEYS and 'content' in item and item.content == "")

- name: Get github key(s) and update the authorized_keys file
  authorized_key:
    user: "{{ item.name }}"
    exclusive: yes
    key: "https://github.com/{{ item.name }}.keys"
  when: item.github is defined and item.get('state', 'present') == 'present'
  register: task_result
  until: task_result is succeeded
  retries: 5
  with_items: "{{ user_info }}"

- name: Create ~/.ssh directory for non github users
  file:
    path: "/home/{{ item.name }}/.ssh" 
    state: directory 
    mode: "0755"
    owner: "{{ item.name }}" 
    group: "{{ item.name }}"
  when: item.authorized_keys is defined and item.get('state', 'present') == 'present'
  with_items: "{{ user_info }}"

- name: Build authorized_keys file for non github users
  template:
    src: "templates/authorized_keys.j2"
    dest: "/home/{{ item.name }}/.ssh/authorized_keys"
    mode: "0600"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
  with_items: "{{ user_info }}"
  when: item.authorized_keys is defined and item.get('state', 'present') == 'present'

- name: Create bashrc file for normal users
  template: 
    src: default.bashrc.j2
    dest: "/home/{{ item.name }}/.bashrc" 
    mode: "0640"
    owner: "{{ item.name }}"
  when: not (item.type is defined and item.type == 'restricted') and item.get('state', 'present') == 'present'
  with_items: "{{ user_info }}"

- name: Create .profile for all users
  template:
    src: default.profile.j2
    dest: "/home/{{ item.name }}/.profile" 
    mode: "0640"
    owner: "{{ item.name }}"
  when: item.get('state', 'present') == 'present'
  with_items: "{{ user_info }}"

########################################################
# All tasks below this line are for restricted users

- name: Modify shell for restricted users
  user:
    name: "{{ item.name }}"
    shell: /bin/rbash
  when: item.type is defined and item.type == 'restricted' and item.get('state', 'present') == 'present'
  with_items: "{{ user_info }}"

- name: Create bashrc file for restricted users
  template:
    src: restricted.bashrc.j2
    dest: "/home/{{ item.name }}/.bashrc" 
    mode: "0640"
    owner: "{{ item.name }}"
  when: item.type is defined and item.type == 'restricted' and item.get('state', 'present') == 'present'
  with_items: "{{ user_info }}"

- name: Create sudoers file from template
  template:
    dest: /etc/sudoers.d/99-restricted
    src: restricted.sudoers.conf.j2 
    owner: root
    group: root 
    mode: 0440 
    validate: 'visudo -cf %s'

  # Prevent restricted user from updating their PATH and
  # environment by ensuring root ownership

- name: Change home directory ownership to root for restricted users
  file:
    path: "/home/{{ item.name }}"
    owner: root
    group: "{{ item.name }}"
    recurse: yes
  when: item.type is defined and item.type == 'restricted' and item.get('state', 'present') == 'present'
  with_items: "{{ user_info }}"

- name: Create ~/bin directory
  file:
    path: "/home/{{ item.name }}/bin" 
    state: directory 
    mode: "0750"
    owner: root 
    group: "{{ item.name }}"
  when: item.type is defined and item.type == 'restricted' and item.get('state', 'present') == 'present'
  with_items: "{{ user_info }}"

- name: Create allowed command links
  file:
    src: "{{ item[1] }}"
    dest: "/home/{{ item[0].name }}/bin/{{ item[1]|basename }}"
    state: link
  when: item[0].type is defined and item[0].type == 'restricted' and item[0].get('state', 'present') == 'present'
  with_nested:
    - "{{ user_info }}"
    - "{{ user_rbash_links }}"

- name: remove ssh AllowUsers directive
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^AllowUsers"
    state: absent
  register: users_ssh_access

- name: Restart ssh (ubuntu/debian)
  service:
    name: ssh
    state: restarted
  become: True
  when: >
    users_ssh_access.changed and
    ansible_distribution in common_debian_variants

- name: Restart ssh (redhat)
  service:
    name: sshd
    state: restarted
  become: True
  when: >
    users_ssh_access.changed and
    ansible_distribution in common_redhat_variants
