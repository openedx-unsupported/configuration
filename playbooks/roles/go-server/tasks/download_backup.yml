#
# edX Configuration
#
# github:     https://github.com/edx/configuration
# wiki:       https://github.com/edx/configuration/wiki
# code style: https://github.com/edx/configuration/wiki/Ansible-Coding-Conventions
# license:    https://github.com/edx/configuration/blob/master/LICENSE.TXT
#
#
#
# Task to download go-server backup
#
# Overview:
#
# Downloads a TGZ file containing a go-server backup.
#
# Example play:
#
# - name: Configure instance(s)
#   hosts: go-server
#   become: True
#   vars_files:
#     - "{{ secure_dir }}/admin/sandbox.yml"
#   gather_facts: True
#   roles:
#     - common
#

- name: stop go-server
  service:
    name: "{{ GO_SERVER_SERVICE_NAME }}"
    state: stopped

- name: install system packages needed for downloading backup
  apt:
    name: "{{ item }}"
    state: present
    update_cache: true
    cache_valid_time: 3600
  with_items: "{{ GO_SERVER_BACKUP_APT_PKGS }}"

- name: install required python packages
  pip:
    name: "{{ item }}"
    state: present
  with_items: "{{ GO_SERVER_BACKUP_PIP_PKGS }}"

- name: create the temp directory
  file:
    path: "{{ GO_SERVER_TEMP_RESTORE_DIRECTORY }}"
    state: directory
    mode: 0755

- name: get s3 one time url
  s3:
    bucket: "{{ GO_SERVER_BACKUP_S3_BUCKET }}"
    object: "{{ GO_SERVER_BACKUP_S3_OBJECT }}"
    mode: "geturl"
    expiration: 30
  when: GO_SERVER_BACKUP_S3_BUCKET and GO_SERVER_BACKUP_S3_OBJECT
  register: s3_one_time_url

- name: download from one time url
  get_url:
    url: "{{ s3_one_time_url.url }}"
    dest: "{{ GO_SERVER_TEMP_RESTORE_DIRECTORY }}/{{ GO_SERVER_BACKUP_FILENAME }}"
    mode: "0600"
  when: GO_SERVER_BACKUP_S3_BUCKET and GO_SERVER_BACKUP_S3_OBJECT
  register: download_backup_s3

- name: copy go-server backup from backup storage
  unarchive:
    src: "{{ GO_SERVER_TEMP_RESTORE_DIRECTORY }}/{{ GO_SERVER_BACKUP_FILENAME }}"
    dest: "{{ GO_SERVER_TEMP_RESTORE_DIRECTORY }}/"
    copy: no
  when: download_backup_s3.changed

- include: restore_backup.yml
  when: download_backup_s3.changed

- name: remove the temp directory
  file:
    path: "{{ GO_SERVER_TEMP_RESTORE_DIRECTORY }}"
    state: absent
