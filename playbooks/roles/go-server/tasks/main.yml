---
#
# edX Configuration
#
# github:     https://github.com/edx/configuration
# wiki:       https://openedx.atlassian.net/wiki/display/OpenOPS
# code style: https://openedx.atlassian.net/wiki/display/OpenOPS/Ansible+Code+Conventions
# license:    https://github.com/edx/configuration/blob/master/LICENSE.TXT
#
#
#
# Tasks for role go-server
#
# Overview:
#
# Deploys go-server using aptitude!
#
# Dependencies:
#    - openjdk8
#
# Example play:
#
# - name: Configure instance(s)
#   hosts: go-server
#   become: True
#   vars_files:
#     - "{{ secure_dir }}/admin/sandbox.yml"
#   gather_facts: True
#   roles:
#     - common
#

- name: install aptitude key for go-server/go-server
  apt_key:
    url: "{{ GO_SERVER_APT_KEY_URL }}"
    state: present
  tags:
    - install
    - install:base
    
- name: install go-server aptitude repository
  apt_repository:
    repo: "{{ GO_SERVER_APT_SOURCE }}"
    state: present
  tags:
    - install
    - install:base

- name: install openjdk ppa repository
  apt_repository:
    repo: "{{ openjdk_apt_source }}"
    state: present
  tags:
    - install
    - install:base

- name: install other needed system packages
  apt:
    name: "{{ item }}"
    state: present
    update_cache: true
    cache_valid_time: 3600
  with_items: "{{ GO_SERVER_APT_PKGS }}"
  tags:
    - install
    - install:base

- name: install go-server using apt-get
  apt:
    name: "{{ GO_SERVER_APT_NAME }}={{ GO_SERVER_VERSION }}"
    update_cache: yes
    state: present
  tags:
    - install
    - install:base

- name: create go-server plugin directory
  file:
    path: "{{ GO_SERVER_PLUGIN_DIR }}"
    state: directory
    mode: 0776
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"
  tags:
    - install
    - install:base

- name: install go-server plugins
  get_url:
    url: "{{ item.url }}"
    dest: "{{ GO_SERVER_PLUGIN_DIR }}"
    mode: 0776
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"
    checksum: "md5:{{ item.md5 }}"
  with_items:
    - { url: "{{ GO_SERVER_OAUTH_LOGIN_JAR_URL }}", md5: "{{ GO_SERVER_OAUTH_LOGIN_MD5 }}" }
    - { url: "{{ GO_SERVER_GITHUB_PR_PLUGIN_JAR_URL }}", md5: "{{ GO_SERVER_GITHUB_PR_PLUGIN_MD5 }}" }
  tags:
    - install
    - install:base

- name: install go-server configuration
  template:
    src: edx/app/go-server/cruise-config.xml.j2
    dest: "{{ GO_SERVER_CONF_HOME }}/cruise-config.xml"
    mode: 0600
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"
    force: no
  tags:
    - install
    - install:base

- name: ensure everyone can read go-server log files
  file:
    path: "/var/log/go-server"
    state: directory
    mode: "0755"
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"
  tags:
    - install
    - install:base

- include: download_backup.yml
  when: GO_SERVER_BACKUP_S3_BUCKET and GO_SERVER_BACKUP_S3_OBJECT and GO_SERVER_RESTORE_BACKUP

- name: generate lines for go-server password file for users
  command: "/usr/bin/htpasswd -nbB '{{ item.username }}' '{{ item.password }}'"
  with_items: "{{ GO_SERVER_USERS }}"
  when: item.username and item.password
  register: go_server_users_htpasswds
  tags:
    - install
    - install:app-configuration
    - update-gocd-users

- name: replace the password lines in the password file
  lineinfile:
    dest: "{{ GO_SERVER_CONF_HOME }}/{{ GO_SERVER_PASSWORD_FILE_NAME }}"
    regexp: "^{{ item.item.username }}"
    line: "{{ item.stdout }}"
    create: yes
    mode: "0600"
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"
  with_items: "{{ go_server_users_htpasswds.results }}"
  when: item.item.username and item.item.password and item.stdout
  tags:
    - install
    - install:app-configuration
    - update-gocd-users

- name: create ssh directory
  file:
    path: "/var/go/.ssh"
    state: directory
    mode: "0755"
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"
  tags:
    - git_identity

- name: install ssh key for the secure repos
  copy:
    content: "{{ GO_GIT_KEY }}"
    dest: ~/.ssh/id_rsa
    mode: 0600
  become_user: "{{ GO_SERVER_USER }}"
  tags:
    - git_identity

- name: Check to see if the known hosts file exists
  stat: path=~/.ssh/known_hosts
  become_user: "{{ GO_SERVER_USER }}"
  register: known_hosts_register
  tags:
    - git_identity

- name: create known_hosts file
  file:
    path: ~/.ssh/known_hosts
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"
    mode: 0600
    state: "{{ 'file' if known_hosts_register.stat.exists else 'touch'}}"
  become_user: "{{ GO_SERVER_USER }}"
  tags:
    - git_identity

# Ensure there is no bloat in the known_hosts file and that any duplicates are sorted out. This way the play can be run
# multiple times on the host without any side effects.
- name: setup known_hosts for github.com
  command: bash -c "ssh-keyscan -t rsa,dsa github.com 2>&1 | sort -u - ~/.ssh/known_hosts > ~/.ssh/tmp_hosts && mv ~/.ssh/tmp_hosts ~/.ssh/known_hosts"
  become_user: "{{ GO_SERVER_USER }}"
  tags:
    - git_identity

# Setup environment variables to cleanup the git config repository
- name: Set go-server environment variables
  lineinfile:
    destfile: /etc/default/go-server
    regexp: "^export GO_SERVER_SYSTEM_PROPERTIES=*"
    line: "export GO_SERVER_SYSTEM_PROPERTIES='-Xmx{{GO_SERVER_MAX_MEM}} -Dgo.config.repo.gc.cron=\"0 0 2 ? * SAT\" -Dgo.config.repo.gc.periodic=\"Y\"'"
  tags:
    - install
    - install:app-configuration

- name: Restart go-server
  service:
    name: "{{ GO_SERVER_SERVICE_NAME }}"
    state: restarted
  tags:
    - install
    - install:app-configuration

- include: setup_regular_backup.yml
  when: GO_SERVER_BACKUP_S3_BUCKET and GO_SERVER_BACKUP_S3_OBJECT and GO_SERVER_CONFIGURE_BACKUPS
  tags:
    - setup_backups
