---
- name: Install jenkins specific system packages
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items: "{{ jenkins_debian_pkgs }}"
  tags:
    - jenkins

- name: Install jenkins extra system packages
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items: "{{ JENKINS_EXTRA_PKGS }}"
  tags:
    - jenkins

- name: Create jenkins group
  group:
    name: "{{ jenkins_group }}"
    state: present

- name: Add the jenkins user to the group
  user:
    name: "{{ jenkins_user }}"
    append: yes
    groups: "{{ jenkins_group }}"

# Should be resolved in the next release, but until then we need to do this
# https://issues.jenkins-ci.org/browse/JENKINS-20407
- name: Workaround for JENKINS-20407
  file:
    path: "/var/run/jenkins"
    state: directory
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"

# TODO in Ansible 2.1 we can do apt: deb="{{ jenkins_deb_url }}"
- name: download Jenkins package
  get_url: url="{{ jenkins_deb_url }}" dest="/tmp/{{ jenkins_deb }}"

- name: install Jenkins package
  apt:
    deb: "/tmp/{{ jenkins_deb }}"

- name: Stop Jenkins
  service:
    name: jenkins
    state: stopped

- name: Set jvm args
  lineinfile:
    backup: yes
    dest: /etc/default/jenkins
    regexp: '^JAVA_ARGS='
    line: 'JAVA_ARGS=\"{{ jenkins_jvm_args }}\"'
  notify:
    - restart Jenkins
  tags:
    - java
    - jenkins

- name: Set jenkins home
  lineinfile:
    backup: yes
    dest: /etc/default/jenkins
    regexp: '^JENKINS_HOME='
    line: 'JENKINS_HOME=\"{{ jenkins_home }}\"'
  notify:
    - restart Jenkins
  tags:
    - java
    - jenkins

# Move /var/lib/jenkins to Jenkins home (on the EBS)
- name: Move /var/lib/jenkins
  command: "mv /var/lib/jenkins {{ jenkins_home }}"
  args:
    creates: "{{ jenkins_home }}"

- name: Set owner for Jenkins home
  file:
    path: "{{ jenkins_home }}"
    recurse: yes
    state: directory
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"

# Symlink /var/lib/jenkins to {{ COMMON_DATA_DIR }}/jenkins
# since Jenkins will expect its files to be in /var/lib/jenkins
- name: Symlink /var/lib/jenkins
  file:
    src: "{{ jenkins_home }}"
    dest: /var/lib/jenkins
    state: link
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
  notify:
    - restart Jenkins

# Using this instead of the user module because the user module
# fails if the directory exists.
- name: Set home directory for jenkins user
  shell: "usermod -d {{ jenkins_home }} {{ jenkins_user }}"

- name: Make plugins directory
  file:
    path: "{{ jenkins_home }}/plugins"
    state: directory
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"

# We first download the plugins to a temp directory and include
# the version in the file name.  That way, if we increment
# the version, the plugin will be updated in Jenkins
- name: Download Jenkins plugins
  get_url:
    url: "http://updates.jenkins-ci.org/download/plugins/{{ item.name }}/{{ item.version }}/{{ item.name }}.hpi"
    dest: "/tmp/{{ item.name }}_{{ item.version }}"
  with_items: "{{ jenkins_plugins }}"
  register: jenkins_plugin_downloads

- name: Install Jenkins plugins
  command: "cp {{ item.dest }} {{ jenkins_home }}/plugins/{{ item.item.name }}.hpi"
  with_items: "{{ jenkins_plugin_downloads.results }}"
  when: item.changed

- name: Set Jenkins plugin permissions
  file:
    path: "{{ jenkins_home }}/plugins/{{ item.item.name }}.hpi"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: "0644"
  with_items: "{{ jenkins_plugin_downloads.results }}"
  when: item.changed
  notify:
    - restart Jenkins

# We had to fork some plugins to workaround
# certain issues.  If these changes get merged
# upstream, we may be able to use the regular plugin install process.
# Until then, we compile and install the forks ourselves.
- name: Checkout custom plugin repo
  git_2_0_1:
    repo: "{{ item.repo_url }}"
    dest: "/tmp/{{ item.repo_name }}"
    version: "{{ item.version }}"
    accept_hostkey: yes
  with_items: "{{ jenkins_custom_plugins }}"
  register: jenkins_custom_plugins_checkout

- name: Compile custom plugins
  command: "mvn -Dmaven.test.skip=true install"
  args:
    chdir: "/tmp/{{ item.item.repo_name }}"
  with_items: "{{ jenkins_custom_plugins_checkout.results }}"
  when: item.changed

- name: Install custom plugins
  command: mv /tmp/{{ item.item.repo_name }}/target/{{ item.item.package }}
           {{ jenkins_home }}/plugins/{{ item.item.package }}
  with_items: "{{ jenkins_custom_plugins_checkout.results }}"
  when: item.changed
  notify:
    - restart Jenkins

- name: Set custom plugin permissions
  file:
    path: "{{ jenkins_home }}/plugins/{{ item.item.package }}"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: "0700"
  with_items: "{{ jenkins_custom_plugins_checkout.results }}"
  when: item.changed

# Plugins that are bundled with Jenkins are "pinned".
# Jenkins will overwrite updated plugins with its built-in version
# unless we create a ".pinned" file for the plugin.
# See https://issues.jenkins-ci.org/browse/JENKINS-13129
- name: Create plugin pin files
  command: "touch {{ jenkins_home }}/plugins/{{ item }}.jpi.pinned"
  args:
    creates: "{{ jenkins_home }}/plugins/{{ item }}.jpi.pinned"
  with_items: "{{ jenkins_bundled_plugins }}"

- name: Setup nginix vhost
  template:
    src: "etc/nginx/sites-available/jenkins.j2"
    dest: "/etc/nginx/sites-available/jenkins"

- name: Enable jenkins vhost
  file:
    src: "/etc/nginx/sites-available/jenkins"
    dest: "/etc/nginx/sites-enabled/jenkins"
    state: link
  notify:
    - start nginx

- include: datadog.yml
  when: COMMON_ENABLE_DATADOG
  tags:
    - datadog
