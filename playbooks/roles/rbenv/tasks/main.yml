---

# rbenv
#
# Dependencies:
#
#   * common
#
# Example play:
#
#   roles:
#   - common
#   - role: rbenv
#     rbenv_user: "{{ forum_user }}"
#     rbenv_dir: "{{ forum_rbenv_dir }}"
#     rbenv_ruby_version: "{{ FORUM_RUBY_VERSION }}"
#
# Parameters:
#
#   * rbenv_user
#   * rbenv_dir
#   * rbenv_ruby_version
#
# cribbed from https://github.com/mmoya/ansible-playbooks/blob/master/rbenv/main.yml
# with a number of changes.
#

- fail:
    msg: "rbenv_user required for role"
  when: rbenv_user is not defined

- fail:
    msg: "rbenv_dir required for role"
  when: rbenv_dir is not defined

- fail:
    msg: "rbenv_ruby_version required for role"
  when: rbenv_ruby_version is not defined

- name: create rbenv user {{ rbenv_user }}
  user:
    name: "{{ rbenv_user }}"
    home: "{{ rbenv_dir }}"
    shell: /bin/false
    createhome: no
  when: rbenv_user != common_web_user
  tags:
    - install
    - install:base

- name: create rbenv dir if it does not exist
  file:
    path: "{{ rbenv_dir }}"
    owner: "{{ rbenv_user }}"
    state: directory
  tags:
    - install
    - install:base

- name: install build depends
  apt: pkg={{ ",".join(rbenv_debian_pkgs) }} update_cache=yes state=present install_recommends=no
  with_items: "{{ rbenv_debian_pkgs }}"
  tags:
    - install
    - install:base

- name: update rbenv repo
  git:
    repo: https://github.com/sstephenson/rbenv.git
    dest: "{{ rbenv_dir }}/.rbenv"
    version: "{{ RBENV_VERSION }}"
    accept_hostkey: yes
  become_user: "{{ rbenv_user }}"
  tags:
    - install
    - install:base

- name: ensure ruby_env exists
  template:
    src: ruby_env.j2
    dest: "{{ rbenv_dir }}/ruby_env"
  become_user: "{{ rbenv_user }}"
  tags:
    - install
    - install:base

- name: check ruby-build installed
  command: test -x /usr/local/bin/ruby-build
  register: rbuild_present
  ignore_errors: yes
  tags:
    - install
    - install:base

- name: if ruby-build exists, which versions we can install
  command: /usr/local/bin/ruby-build --definitions
  when: rbuild_present is succeeded
  register: installable_ruby_vers
  ignore_errors: yes
  tags:
    - install
    - install:base

### in this block, we (re)install ruby-build if it doesn't exist or if it can't install the requested version
- name: create temporary directory
  command: mktemp -d
  register: tempdir
  become_user: "{{ rbenv_user }}"
  when: rbuild_present is failed or (installable_ruby_vers is defined and rbenv_ruby_version not in installable_ruby_vers)
  tags:
    - install
    - install:base

- name: clone ruby-build repo
  git:
    repo: https://github.com/sstephenson/ruby-build.git
    dest: "{{ tempdir.stdout }}/ruby-build"
    accept_hostkey: yes
  when: tempdir.stdout is defined and (rbuild_present is failed or (installable_ruby_vers is defined and rbenv_ruby_version not in installable_ruby_vers))
  become_user: "{{ rbenv_user }}"
  tags:
    - install
    - install:base

- name: install ruby-build
  command: ./install.sh chdir={{ tempdir.stdout }}/ruby-build
  when: tempdir.stdout is defined and (rbuild_present is failed or (installable_ruby_vers is defined and rbenv_ruby_version not in installable_ruby_vers))
  tags:
    - install
    - install:base

- name: remove temporary directory
  file: path={{ tempdir.stdout }} state=absent
  when: tempdir.stdout is defined and (rbuild_present is failed or (installable_ruby_vers is defined and rbenv_ruby_version not in installable_ruby_vers))
  tags:
    - install
    - install:base

- name: check ruby {{ rbenv_ruby_version }} installed
  shell: "rbenv versions | grep {{ rbenv_ruby_version }}"
  register: ruby_installed
  become_user: "{{ rbenv_user }}"
  environment: "{{ rbenv_environment }}"
  ignore_errors: yes
  tags:
    - install
    - install:base

- name: install ruby {{ rbenv_ruby_version }}
  shell: "rbenv install {{ rbenv_ruby_version }} creates={{ rbenv_dir }}/.rbenv/versions/{{ rbenv_ruby_version }}"
  when: ruby_installed is failed
  become_user: "{{ rbenv_user }}"
  environment: "{{ rbenv_environment }}"
  tags:
    - install
    - install:base

- name: set global ruby {{ rbenv_ruby_version }}
  shell: "rbenv global {{ rbenv_ruby_version }}"
  become_user: "{{ rbenv_user }}"
  environment: "{{ rbenv_environment }}"
  tags:
    - install
    - install:base

- name: update rubygems
  shell: "gem update --system {{ RBENV_RUBYGEMS_VERSION }}"
  become_user: "{{ rbenv_user }}"
  environment: "{{ rbenv_environment }}"
  tags:
    - install
    - install:base

- name: install bundler
  shell: "gem install bundler -v {{ RBENV_BUNDLER_VERSION }}"
  become_user: "{{ rbenv_user }}"
  environment: "{{ rbenv_environment }}"
  tags:
    - install
    - install:base

- name: remove rbenv version of rake
  file: path="{{ rbenv_dir }}/.rbenv/versions/{{ rbenv_ruby_version }}/bin/rake" state=absent
  when: jenkins_worker is not defined or not jenkins_worker
  tags:
    - install
    - install:base

- name: install rake gem
  shell: "gem install rake -v {{ RBENV_RAKE_VERSION }}"
  become_user: "{{ rbenv_user }}"
  environment: "{{ rbenv_environment }}"
  when: jenkins_worker is not defined or not jenkins_worker
  tags:
    - install
    - install:base

- name: rehash
  shell: "rbenv rehash"
  become_user: "{{ rbenv_user }}"
  environment: "{{ rbenv_environment }}"
  tags:
    - install
    - install:base
