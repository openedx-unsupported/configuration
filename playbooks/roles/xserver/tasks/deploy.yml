- name: "writing supervisor script"
  template: >
    src=xserver.conf.j2 dest={{ supervisor_available_dir }}/xserver.conf
    owner={{ supervisor_user }} group={{ common_web_user }} mode=0644

- name: "enable supervisor script"
  file: >
    src={{ supervisor_available_dir }}/xserver.conf
    dest={{ supervisor_cfg_dir }}/xserver.conf
    owner={{ supervisor_user }} group={{ common_web_user }} mode=0644
    state=link force=yes
  when: not disable_edx_services

- name: checkout code
  git: >
    dest={{xserver_code_dir}} repo={{xserver_source_repo}} version={{xserver_version}}
    accept_hostkey=yes
  sudo_user: "{{ xserver_user }}"
  register: xserver_checkout
  notify: restart xserver

- name: install requirements
  pip: >
    requirements="{{xserver_requirements_file}}" virtualenv="{{ xserver_venv_dir }}" state=present
    extra_args="-i {{ COMMON_PYPI_MIRROR_URL }}"
  sudo_user: "{{ xserver_user }}"
  notify: restart xserver

- name: install sandbox requirements
  pip: >
    requirements="{{xserver_requirements_file}}" virtualenv="{{xserver_venv_sandbox_dir}}" state=present
    extra_args="-i {{ COMMON_PYPI_MIRROR_URL }}"
  sudo_user: "{{ xserver_user }}"
  notify: restart xserver

- name: create xserver application config
  template: src=xserver.env.json.j2 dest={{ xserver_app_dir }}/env.json
  sudo_user: "{{ xserver_user }}"
  notify: restart xserver

- name: install read-only ssh key for the content repo that is required for grading
  copy: >
    content="{{ XSERVER_GIT_IDENTITY }}" dest={{ xserver_git_identity }}
    owner={{ xserver_user }} group={{ xserver_user }} mode=0600
  notify: restart xserver

- name: upload ssh script
  template: >
    src=git_ssh.sh.j2 dest=/tmp/git_ssh.sh
    owner={{ xserver_user }} mode=750
  notify: restart xserver

- name: checkout grader code
  git: >
    dest={{ XSERVER_GRADER_DIR }} repo={{ XSERVER_GRADER_SOURCE }} version={{ xserver_grader_version }}
    accept_hostkey=yes
  environment:
    GIT_SSH: /tmp/git_ssh.sh
  notify: restart xserver
  register: xserver_grader_checkout
  sudo_user: "{{ xserver_user }}"

- name: remove read-only ssh key for the content repo
  file: path={{ xserver_git_identity }} state=absent
  notify: restart xserver

  # call supervisorctl update. this reloads
  # the supervisorctl config and restarts
  # the services if any of the configurations
  # have changed.
  #
- name: update supervisor configuration
  shell:  "{{ supervisor_ctl }} -c {{ supervisor_cfg }} update"
  register: supervisor_update
  changed_when: supervisor_update.stdout is defined and supervisor_update.stdout != ""
  when: not disable_edx_services

- name: ensure xserver is started
  supervisorctl_local: >
    name=xserver
    supervisorctl_path={{ supervisor_ctl }}
    config={{ supervisor_cfg }}
    state=started
  when: not disable_edx_services

- name: create a symlink for venv python
  file: >
    src="{{ xserver_venv_bin }}/{{ item }}"
    dest={{ COMMON_BIN_DIR }}/{{ item }}.xserver
    state=link
  with_items:
  - python
  - pip

- name: enforce app-armor rules
  command: aa-enforce {{ xserver_venv_sandbox_dir }}

- include: ec2.yml tags=deploy
  when: COMMON_TAG_EC2_INSTANCE
