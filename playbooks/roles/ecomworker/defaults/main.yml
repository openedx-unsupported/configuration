---
#
# edX Configuration
#
# github:     https://github.com/edx/configuration
# wiki:       https://openedx.atlassian.net/wiki/display/OpenOPS
# code style: https://openedx.atlassian.net/wiki/display/OpenOPS/Ansible+Code+Conventions
# license:    https://github.com/edx/configuration/blob/master/LICENSE.TXT
#
# Defaults for role ecomworker.
#

ECOMMERCE_WORKER_GIT_IDENTITY: !!null
ECOMMERCE_WORKER_VERSION: 'master'

ECOMMERCE_WORKER_REPOS:
  - PROTOCOL: '{{ COMMON_GIT_PROTOCOL }}'
    DOMAIN: '{{ COMMON_GIT_MIRROR }}'
    PATH: '{{ COMMON_GIT_PATH }}'
    REPO: ecommerce-worker.git
    VERSION: '{{ ECOMMERCE_WORKER_VERSION }}'
    DESTINATION: '{{ ecommerce_worker_code_dir }}'
    SSH_KEY: '{{ ECOMMERCE_WORKER_GIT_IDENTITY }}'

# Requires that New Relic be enabled via COMMON_ENABLE_NEWRELIC, and that
# a key be provided via NEWRELIC_LICENSE_KEY.
ECOMMERCE_WORKER_NEWRELIC_APPNAME: '{{ COMMON_ENVIRONMENT }}-{{ COMMON_DEPLOYMENT }}-{{ ecommerce_worker_service_name }}'

# CELERY
ECOMMERCE_WORKER_BROKER_USERNAME: 'celery'
ECOMMERCE_WORKER_BROKER_PASSWORD: 'celery'
# Used as the default RabbitMQ IP.
ECOMMERCE_WORKER_BROKER_HOST: '{{ ansible_default_ipv4.address }}'
# Used as the default RabbitMQ port.
ECOMMERCE_WORKER_BROKER_PORT: 5672
# Default broker URL. See http://celery.readthedocs.org/en/latest/configuration.html#broker-url.
ECOMMERCE_WORKER_BROKER_URL: 'amqp://{{ ECOMMERCE_WORKER_BROKER_USERNAME }}:{{ ECOMMERCE_WORKER_BROKER_PASSWORD }}@{{ ECOMMERCE_WORKER_BROKER_HOST }}:{{ ECOMMERCE_WORKER_BROKER_PORT }}'
ECOMMERCE_WORKER_CONCURRENCY: 4
# END CELERY

# ORDER FULFILLMENT
# Absolute URL used to construct API calls against the ecommerce service.
ECOMMERCE_WORKER_ECOMMERCE_API_ROOT: 'http://127.0.0.1:8002/api/v2/'

# Long-lived access token used by Celery workers to authenticate against the ecommerce service.
ECOMMERCE_WORKER_WORKER_ACCESS_TOKEN: 'your-secret-here'

# Maximum number of retries before giving up on the fulfillment of an order.
# For reference, 11 retries with exponential backoff yields a maximum waiting
# time of 2047 seconds (about 30 minutes). Defaulting this to None could yield
# unwanted behavior: infinite retries.
ECOMMERCE_WORKER_MAX_FULFILLMENT_RETRIES: 11
# END ORDER FULFILLMENT

# SAILTHRU INTEGRATION
# Set to false to ignore Sailthru events
#  Sailthru support in ecommerce_worker sends purchase/enroll events to the email
#  marketing system Sailthru for tracking the efficacy of email marketing campaigns.  It does not
#  have to be enabled for normal ecommerce operation.  If it is enabled, the waffle switch
#  sailthru_enable should be set to on in ecommerce as well or ecommerce won't send
#  purchase/enroll events to ecommerce_worker.
ECOMMERCE_WORKER_SAILTHRU_ENABLE: false

# Template used when user upgrades to verified
ECOMMERCE_WORKER_SAILTHRU_UPGRADE_TEMPLATE: !!null

# Template used with user purchases a course
ECOMMERCE_WORKER_SAILTHRU_PURCHASE_TEMPLATE: !!null

# Template used with user enrolls in a free course
ECOMMERCE_WORKER_SAILTHRU_ENROLL_TEMPLATE: !!null

# Abandoned cart template
ECOMMERCE_WORKER_SAILTHRU_ABANDONED_CART_TEMPLATE: !!null

# minutes to delay before abandoned cart message
ECOMMERCE_WORKER_SAILTHRU_ABANDONED_CART_DELAY: 60

# Sailthru key and secret required for integration
#  Note: stage keys/secret should be taken from Sailthru Edx Dev account, prod should be from edX.org
ECOMMERCE_WORKER_SAILTHRU_KEY: 'sailthru key here'
ECOMMERCE_WORKER_SAILTHRU_SECRET: 'sailthru secret here'

# Retry settings for Sailthru celery tasks
ECOMMERCE_WORKER_SAILTHRU_RETRY_SECONDS: 3600
ECOMMERCE_WORKER_SAILTHRU_RETRY_ATTEMPTS: 6

# ttl for cached course content from Sailthru (in seconds)
ECOMMERCE_WORKER_SAILTHRU_CACHE_TTL_SECONDS: 3600

# dummy price for audit/honor (i.e., if cost = 0)
#  Note: setting this value to 0 skips Sailthru calls for free transactions
ECOMMERCE_WORKER_SAILTHRU_MINIMUM_COST: 100
# END SAILTHRU INTEGRATION

# Ecommerce Worker settings
ECOMMERCE_WORKER_JWT_SECRET_KEY: 'insecure-secret-key'
ECOMMERCE_WORKER_JWT_ISSUER: 'ecommerce_worker'
ECOMMERCE_WORKER_SITE_OVERRIDES: !!null

ECOMMERCE_WORKER_SERVICE_CONFIG:
  BROKER_URL: '{{ ECOMMERCE_WORKER_BROKER_URL }}'
  ECOMMERCE_API_ROOT: '{{ ECOMMERCE_WORKER_ECOMMERCE_API_ROOT }}'
  JWT_SECRET_KEY: '{{ ECOMMERCE_WORKER_JWT_SECRET_KEY }}'
  JWT_ISSUER: '{{ ECOMMERCE_WORKER_JWT_ISSUER }}'
  MAX_FULFILLMENT_RETRIES: '{{ ECOMMERCE_WORKER_MAX_FULFILLMENT_RETRIES }}'
  SAILTHRU:
    SAILTHRU_ENABLE: '{{ ECOMMERCE_WORKER_SAILTHRU_ENABLE }}'
    SAILTHRU_UPGRADE_TEMPLATE: '{{ ECOMMERCE_WORKER_SAILTHRU_UPGRADE_TEMPLATE }}'
    SAILTHRU_PURCHASE_TEMPLATE: '{{ ECOMMERCE_WORKER_SAILTHRU_PURCHASE_TEMPLATE }}'
    SAILTHRU_ENROLL_TEMPLATE: '{{ ECOMMERCE_WORKER_SAILTHRU_ENROLL_TEMPLATE }}'
    SAILTHRU_ABANDONED_CART_TEMPLATE: '{{ ECOMMERCE_WORKER_SAILTHRU_ABANDONED_CART_TEMPLATE }}'
    SAILTHRU_ABANDONED_CART_DELAY: '{{ ECOMMERCE_WORKER_SAILTHRU_ABANDONED_CART_DELAY }}'
    SAILTHRU_KEY: '{{ ECOMMERCE_WORKER_SAILTHRU_KEY }}'
    SAILTHRU_SECRET: '{{ ECOMMERCE_WORKER_SAILTHRU_SECRET }}'
    SAILTHRU_RETRY_SECONDS: '{{ ECOMMERCE_WORKER_SAILTHRU_RETRY_SECONDS }}'
    SAILTHRU_RETRY_ATTEMPTS: '{{ ECOMMERCE_WORKER_SAILTHRU_RETRY_ATTEMPTS }}'
    SAILTHRU_CACHE_TTL_SECONDS: '{{ ECOMMERCE_WORKER_SAILTHRU_CACHE_TTL_SECONDS }}'
    SAILTHRU_MINIMUM_COST: '{{ ECOMMERCE_WORKER_SAILTHRU_MINIMUM_COST }}'

  # Site-specific configuration overrides.  Implemented as a dict of dicts with 'site_code' for keys.
  # Ecommerce worker will apply these settings instead of their corresponding default values.
  # For example:
  # SITE_OVERRIDES: {
  #   "site1": {
  #      "ECOMMERCE_API_ROOT": "http://ecommerce-subdomain.domain.com"
  #   },
  #   "site2": {
  #      "JWT_SECRET_KEY": "site2-secret-key",
  #      "JWT_ISSUER": "site2-worker"
  #   }
  # }
  SITE_OVERRIDES: '{{ ECOMMERCE_WORKER_SITE_OVERRIDES }}'


ecommerce_worker_environment:
  WORKER_CONFIGURATION_MODULE: 'ecommerce_worker.configuration.production'
  ECOMMERCE_WORKER_CFG: '{{ COMMON_CFG_DIR }}/{{ ecommerce_worker_service_name }}.yml'

ecommerce_worker_service_name: 'ecomworker'
ecommerce_worker_user: '{{ ecommerce_worker_service_name }}'
ecommerce_worker_home: '{{ COMMON_APP_DIR }}/{{ ecommerce_worker_service_name }}'
ecommerce_worker_code_dir: '{{ ecommerce_worker_home }}/{{ ecommerce_worker_service_name }}'

ecommerce_worker_log_dir: '{{ COMMON_LOG_DIR }}/{{ ecommerce_worker_service_name }}'

ecommerce_worker_requirements_base: '{{ ecommerce_worker_code_dir }}/requirements'
ecommerce_worker_requirements:
  - production.txt
  - optional.txt

# OS packages
ecommerce_worker_debian_pkgs: []
ecommerce_worker_redhat_pkgs: []
